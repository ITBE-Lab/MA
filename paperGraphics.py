from bokeh.plotting import figure, output_file, show
from bokeh.layouts import row, column, gridplot
from bokeh.models import Arrow, OpenHead, NormalHead, VeeHead, AdaptiveTicker, FixedTicker
from bokeh.palettes import d3
from bokeh.io import export_png, export_svgs
from bokeh.models import FuncTickFormatter, FixedTicker, Label, ColorBar, FactorRange
from bokeh.models import LinearAxis, Range1d, LogColorMapper, FixedTicker, LinearColorMapper
from bokeh.models import ColumnDataSource, CompositeTicker, SingleIntervalTicker, BasicTickFormatter
from bokeh.transform import dodge
from bokeh.core.properties import value
import math
import random
import numpy as np


font = "Helvetica"

dark_greys = [
        "#9f9f9f",
        "#939393",
        "#868686",
]

green = "#77933C"
blue = "#376092"
red = "#953735"
purple = "#604A7B"
orange = "#E46C0A"

greys = [
        "#acacac",
        "#b9b9b9",
        "#c6c6c6",
        "#d3d3d3",
        "#dfdfdf",
        "#ececec",
        "#f9f9f9"
    ]

def light_spec_approximation(x):
    #map input [0, 1] to wavelength [350, 645]
    w = 370 + x * (645-370)
    r = 0.0
    g = 0.0
    b = 0.0
    if w < 440:
        r = -(w - 440.) / (440. - 380.)
        b = 1.0
    elif w >= 440 and w < 490:
        g = (w - 440.) / (490. - 440.)
        b = 1.0
    elif w >= 490 and w < 510:
        g = 1.0
        b = -(w - 510.) / (510. - 490.)
    elif w >= 510 and w < 580:
        r = (w - 510.) / (580. - 510.)
        g = 1.0
    elif w >= 580 and w < 645:
        r = 1.0
        g = -(w - 645.) / (645. - 580.)
    elif w >= 645:
        r = 1.0

    #intensity
    i = 1.0
    if w > 650:
        i = .3 + .7*(780-w)/(780-650)
    elif w < 420:
        i = .3 + .7*(w-380)/(420-380)

    #gamma
    m = .8

    return (i*r**m,i*g**m,i*b**m)
"""
for x in np.linspace(0, 1, 100):
    def format(rgb):
        def clamp(x):
            return int(max(0, min(x*255, 255)))
        r, g, b = rgb
        return (clamp(r),clamp(g),clamp(b))
    print(format(light_spec_approximation(x)))
"""

def heatmap_palette(scheme, num_colors):
    def format(rgb):
        def clamp(x):
            return max(0, min(x, 255))
        red, green, blue = rgb
        return "#{0:02x}{1:02x}{2:02x}".format(clamp(int(red * 255)), clamp(int(green * 255)),
                                               clamp(int(blue * 255)))
    return [format(scheme(x)) for x in np.linspace(0, 1, num_colors)]

def simulate_max_length(q_len, mutation_amount, indel_amount,
                        indel_size, sim_amount, max_missmatches
                       ):
    match_lens = []
    if mutation_amount + indel_amount/2 * indel_size >= q_len:
        return None
    for _ in range(sim_amount):
        q = []
        for index in range(q_len):
            q.append(index)
        ##
        # helper function
        # returns a list (amount elements) of random indices that are part of [0, interval_length]
        # and at least min_distance apart from each other
        #
        # if it is not possible to fit enough indices into [0, interval_length] the last indices 
        # are behind interval_length
        def get_random_spots(amount, interval_length, min_distance):
            spots = []
            for index in range(interval_length - min_distance):
                spots.append(index)
            random.shuffle(spots)
            spots = spots[:amount]
            spots.sort()
            for index in range(1,len(spots)):
                if spots[index-1] + min_distance + 1 > spots[index]:
                    spots[index] = spots[index-1] + min_distance + 1
            if len(spots) >=1 and spots[-1] > interval_length:
                start = spots[0]
                for index in range(len(spots)):
                    spots[index] -= start
            return spots

        deletion_amount = int(indel_amount/2)
        insertion_amount = int( (indel_amount+1) /2)

        # deletion
        deletion_spots = get_random_spots(deletion_amount, len(q), indel_size + 1)
        for pos in reversed(deletion_spots):
            q = q[:pos] + q[pos + indel_size:]

        # mutations
        mutation_spots = []
        for index in range(len(q)):
            mutation_spots.append(index)
        random.shuffle(mutation_spots)
        for pos in mutation_spots[:mutation_amount]:
            l = len(q)
            q = q[:pos] + [-2] + q[pos+1:]
            if not len(q) == l:
                print("ERROR: mutation changed query length:" + str(l) + " != " + str(len(q)))
                print(q)

        # insertion
        insertion_spots = get_random_spots(insertion_amount, len(q), 1)
        # pos are sorted in order to we need to reverse them in order 
        # to not insert twice at the same location
        for pos in reversed(insertion_spots):
            for _ in range(indel_size):
                q = q[:pos] + [-2] + q[pos:]

        #get the starting positions for every match
        starts = []
        last = -1
        s_ind = 0
        for ind, num in enumerate(q):
            if num != last + 1:
                starts.append(s_ind)
                s_ind = ind
            last = num
        starts.append(s_ind)

        # get the results
        matches = []
        for start in starts:
            length = 0
            num_mm = 0
            while start+length+1 < len(q) and num_mm <= max_missmatches:
                if q[start] + length + 1 != q[start+length+1]:
                    num_mm += 1
                length += 1
            matches.append(length)

        match_lens.append(matches)

    return match_lens

def only_max(li):
    ret = []
    if li is None:
        return None
    for l in li:
        ret.append(0)
        for x in l:
            if x > ret[-1]:
                ret[-1] = x
    return ret

def mean(li):
    if li is None:
        return float('NaN')
    return sorted(li)[int(len(li)/2)]

def avg(li):
    if li is None:
        return float('NaN')
    avg = 0
    for x in li:
        avg += x
    return avg / len(li)

def save(plot, name, grid=False):
    if grid:
        export_png(gridplot(plot), filename="paperGraphics/" + name + ".png")
        for r in plot:
            for p in r:
                p.output_backend = "svg"
        export_svgs(gridplot(plot), filename="paperGraphics/" + name + ".svg")
    else:
        export_png(plot, filename="paperGraphics/" + name + ".png")
        plot.output_backend = "svg"
        export_svgs(plot, filename="paperGraphics/" + name + ".svg")
    #show(plot)

resolution = 300
min_x = 0
min_y = 0
max_x = 10
max_y = 10

def random_on_genome():
    return ( [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e-05, 3.0000000000000004e-05, 4e-05, 6e-05], [0.00035000000000000027, 0.0020700000000000046, 0.006419999999999907, 0.012899999999999643, 0.01866999999999941, 0.024689999999999164, 0.029309999999998976, 0.029509999999998968, 0.029589999999998964, 0.02994999999999895], [0.049500000000004485, 0.09312999999999659, 0.10157999999999331, 0.08540999999999958, 0.07046000000000538, 0.0524800000000054, 0.03988000000000154, 0.030989999999998907, 0.023459999999999214, 0.019469999999999377], [0.2835600000001428, 0.2028500000000621, 0.10839999999999067, 0.06604000000000709, 0.04710000000000375, 0.039120000000001307, 0.03392999999999972, 0.02893999999999899, 0.024359999999999177, 0.021269999999999303], [0.584869999999973, 0.19182000000005106, 0.08475999999999984, 0.047250000000003796, 0.02921999999999898, 0.018079999999999433, 0.011219999999999711, 0.00755999999999986, 0.005549999999999942, 0.0035300000000000084], [0.8230899999988889, 0.1222399999999853, 0.032189999999999185, 0.010929999999999723, 0.004100000000000001, 0.0025300000000000058, 0.0013400000000000029, 0.0008200000000000015, 0.0005400000000000008, 0.0004700000000000006], [0.9413299999983508, 0.049270000000004414, 0.006239999999999914, 0.0015000000000000033, 0.0007100000000000012, 0.00031000000000000016, 0.0001, 0.00013000000000000002, 7.000000000000001e-05, 2e-05], [0.9838899999981571, 0.014619999999999573, 0.000990000000000002, 0.00026000000000000003, 0.00011, 4e-05, 3.0000000000000004e-05, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06633000000000698, 0.1979700000000572, 0.15913000000001837, 0.10464999999999212, 0.24937000000010862, 0.16641000000002565, 0.04387000000000276], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0029000000000000067, 0.09215999999999697, 0.21072000000006996, 0.15462000000001386, 0.10385999999999243, 0.224770000000084, 0.15348000000001272, 0.04309000000000252, 0.01024999999999975, 0.003020000000000007], [0.00016, 0.0007000000000000012, 0.006189999999999916, 0.046100000000003444, 0.11030999999998993, 0.19924000000005848, 0.13397999999999322, 0.10748999999999102, 0.19883000000005807, 0.1395699999999988, 0.04340000000000262, 0.009899999999999765, 0.0025000000000000057, 0.000990000000000002, 0.0003700000000000003], [0.028599999999999005, 0.053940000000005844, 0.09152999999999721, 0.1085899999999906, 0.08126000000000119, 0.10789999999999086, 0.16968000000002892, 0.1186499999999867, 0.04092000000000186, 0.01098999999999972, 0.0028200000000000065, 0.001010000000000002, 0.0004300000000000005, 0.00016, 4e-05], [0.016279999999999507, 0.028739999999999, 0.05114000000000499, 0.08732999999999884, 0.11884999999998662, 0.08246000000000073, 0.0335399999999996, 0.010659999999999734, 0.002950000000000007, 0.001030000000000002, 0.00035000000000000027, 0.00013000000000000002, 8e-05, 4e-05, 0.0], [0.017829999999999444, 0.02891999999999899, 0.0358400000000003, 0.030989999999998907, 0.01866999999999941, 0.007619999999999858, 0.0028600000000000066, 0.0009400000000000018, 0.0004100000000000004, 0.00018, 8e-05, 5e-05, 1e-05, 3.0000000000000004e-05, 0.0], [0.0031800000000000075, 0.003710000000000009, 0.003800000000000009, 0.002590000000000006, 0.0014700000000000032, 0.0007200000000000012, 0.00035000000000000027, 0.00021, 5e-05, 5e-05, 0.0, 0.0, 0.0, 1e-05, 0.0], [0.00024, 0.00035000000000000027, 0.00038000000000000035, 0.0003300000000000002, 0.00022, 9e-05, 6e-05, 6e-05, 0.0, 1e-05, 1e-05, 0.0, 0.0, 0.0, 0.0], [1e-05, 4e-05, 6e-05, 0.0001, 5e-05, 4e-05, 1e-05, 0.0, 0.0, 0.0, 1e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 2e-05, 0.0, 1e-05, 0.0, 2e-05, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]] )


def genome_on_genome():
    return ( [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 4e-05, 0.0001, 0.0003300000000000002, 0.0009000000000000017, 0.0013100000000000028, 0.0016800000000000038, 0.0019300000000000044, 0.002630000000000006, 0.003060000000000007], [0.0, 0.0045599999999999825, 0.00877999999999981, 0.012099999999999675, 0.011659999999999693, 0.011679999999999692, 0.009939999999999763, 0.008739999999999812, 0.0076999999999998545, 0.007489999999999863], [0.0, 0.035360000000000155, 0.038100000000000994, 0.03384999999999969, 0.03311999999999947, 0.03464999999999994, 0.03522000000000011, 0.035750000000000275, 0.03406999999999976, 0.03410999999999977], [0.0, 0.1353699999999946, 0.11815999999998689, 0.0977499999999948, 0.08062000000000144, 0.06226000000000839, 0.048750000000004255, 0.03737000000000077, 0.029749999999998958, 0.023749999999999202], [0.0, 0.3375700000001968, 0.17691000000003615, 0.09331999999999652, 0.05222000000000532, 0.03308999999999946, 0.022029999999999272, 0.01596999999999952, 0.01245999999999966, 0.009739999999999771], [0.0, 0.5384000000001845, 0.13802999999999727, 0.04992000000000461, 0.024099999999999188, 0.015869999999999523, 0.010309999999999748, 0.007509999999999862, 0.005989999999999924, 0.004909999999999968], [0.0, 0.653439999999661, 0.0861499999999993, 0.026829999999999077, 0.014569999999999575, 0.009599999999999777, 0.007459999999999864, 0.005559999999999942, 0.004429999999999988, 0.004010000000000005], [0.0, 0.7147999999993817, 0.057700000000006996, 0.018229999999999427, 0.012179999999999672, 0.007729999999999853, 0.005619999999999939, 0.004889999999999969, 0.004110000000000001, 0.003320000000000008], [0.0, 0.7427499999992545, 0.04328000000000258, 0.01666999999999949, 0.010599999999999736, 0.007249999999999873, 0.0056399999999999385, 0.003840000000000009, 0.003770000000000009, 0.0027600000000000064], [0.0, 0.7597299999991772, 0.037870000000000924, 0.015619999999999532, 0.009909999999999764, 0.006479999999999904, 0.0049999999999999645, 0.0039700000000000065, 0.0036200000000000086, 0.0028300000000000066], [0.0, 0.7753999999991059, 0.034089999999999766, 0.014109999999999593, 0.008899999999999806, 0.006979999999999884, 0.005659999999999938, 0.004060000000000003, 0.003410000000000008, 0.002670000000000006], [0.0, 0.780879999999081, 0.03382999999999969, 0.013869999999999603, 0.009669999999999774, 0.00632999999999991, 0.00485999999999997, 0.0040200000000000045, 0.0031700000000000074, 0.0027100000000000062], [0.0, 0.7898099999990403, 0.032349999999999234, 0.01295999999999964, 0.008979999999999802, 0.00609999999999992, 0.005179999999999957, 0.0038500000000000092, 0.002930000000000007, 0.0024200000000000055], [0.0, 0.7997099999989953, 0.032319999999999224, 0.013179999999999631, 0.008639999999999816, 0.006159999999999917, 0.004959999999999966, 0.0031700000000000074, 0.0028300000000000066, 0.0023500000000000053], [0.0, 0.8076999999989589, 0.031699999999999035, 0.013329999999999625, 0.008409999999999826, 0.005509999999999944, 0.00462999999999998, 0.0035800000000000085, 0.003030000000000007, 0.0025200000000000057], [0.0, 0.8135599999989322, 0.031859999999999083, 0.012439999999999661, 0.008379999999999827, 0.00559999999999994, 0.004149999999999999, 0.0032500000000000077, 0.002920000000000007, 0.0023600000000000053], [0.0, 0.8222399999988927, 0.029859999999998953, 0.012509999999999659, 0.008019999999999841, 0.0056399999999999385, 0.00414, 0.003390000000000008, 0.002630000000000006, 0.0024200000000000055], [0.0, 0.8247499999988813, 0.030559999999998925, 0.012009999999999679, 0.007989999999999843, 0.005669999999999937, 0.0038900000000000093, 0.003320000000000008, 0.0028300000000000066, 0.002660000000000006], [0.0, 0.8330899999988434, 0.029559999999998966, 0.012139999999999674, 0.008219999999999833, 0.005089999999999961, 0.004179999999999998, 0.002920000000000007, 0.0027300000000000063, 0.0023400000000000053], [0.0, 0.839539999998814, 0.028859999999998994, 0.012109999999999675, 0.007889999999999847, 0.005619999999999939, 0.004010000000000005, 0.002930000000000007, 0.002700000000000006, 0.0020100000000000044], [0.0, 0.8446699999987907, 0.029989999999998948, 0.011049999999999718, 0.007689999999999855, 0.0050499999999999625, 0.003840000000000009, 0.0028100000000000065, 0.0031700000000000074, 0.0021300000000000047], [0.0, 0.8486899999987724, 0.028899999999998992, 0.01074999999999973, 0.007229999999999874, 0.0050499999999999625, 0.003940000000000008, 0.002650000000000006, 0.002550000000000006, 0.0019500000000000045], [0.0, 0.8535199999987504, 0.028669999999999002, 0.010719999999999731, 0.007489999999999863, 0.004739999999999975, 0.003700000000000009, 0.0027500000000000063, 0.002250000000000005, 0.0019700000000000043], [0.0, 0.8584599999987279, 0.02749999999999905, 0.010849999999999726, 0.007489999999999863, 0.00461999999999998, 0.0036400000000000087, 0.002680000000000006, 0.0023600000000000053, 0.0019000000000000043], [0.0, 0.8616899999987132, 0.027579999999999046, 0.010969999999999721, 0.00781999999999985, 0.00485999999999997, 0.003410000000000008, 0.0024900000000000057, 0.002210000000000005, 0.0018400000000000042], [0.0, 0.8664099999986917, 0.027099999999999066, 0.010459999999999742, 0.00707999999999988, 0.004649999999999979, 0.003700000000000009, 0.002230000000000005, 0.0020200000000000044, 0.001810000000000004], [0.0, 0.8683399999986829, 0.028559999999999006, 0.010589999999999737, 0.007619999999999858, 0.00436999999999999, 0.003440000000000008, 0.002590000000000006, 0.002160000000000005, 0.001780000000000004], [0.0, 0.872729999998663, 0.02675999999999908, 0.010129999999999756, 0.007379999999999868, 0.004769999999999974, 0.0032500000000000077, 0.0024700000000000056, 0.0020200000000000044, 0.0019400000000000044], [0.0, 0.8777299999986402, 0.026579999999999087, 0.009699999999999773, 0.006869999999999888, 0.004349999999999991, 0.003340000000000008, 0.002190000000000005, 0.0020100000000000044, 0.001800000000000004], [0.0, 0.8807099999986266, 0.02651999999999909, 0.010419999999999744, 0.0066699999999998965, 0.00413, 0.0032600000000000077, 0.0025000000000000057, 0.0019800000000000043, 0.0016400000000000037], [0.0, 0.8836599999986132, 0.026199999999999102, 0.009679999999999774, 0.006859999999999889, 0.004319999999999992, 0.003380000000000008, 0.0021200000000000047, 0.0020800000000000046, 0.0016700000000000037], [0.0, 0.8881699999985927, 0.025589999999999127, 0.009659999999999775, 0.006759999999999893, 0.003940000000000008, 0.0032900000000000078, 0.0019800000000000043, 0.0019900000000000044, 0.0017100000000000038], [0.0, 0.8899799999985845, 0.025709999999999122, 0.009439999999999784, 0.0061799999999999165, 0.003840000000000009, 0.0031300000000000073, 0.002300000000000005, 0.0020200000000000044, 0.0016200000000000036], [0.0, 0.890749999998581, 0.02549999999999913, 0.009639999999999775, 0.005879999999999929, 0.004439999999999987, 0.0028700000000000067, 0.0020200000000000044, 0.0018900000000000043, 0.0016000000000000035], [0.0, 0.8954399999985596, 0.024849999999999157, 0.009719999999999772, 0.006249999999999914, 0.004050000000000003, 0.0028900000000000067, 0.0019700000000000043, 0.0019100000000000044, 0.0015000000000000033], [0.0, 0.8978099999985488, 0.02400999999999919, 0.00927999999999979, 0.0060799999999999205, 0.003950000000000007, 0.002970000000000007, 0.0019100000000000044, 0.0019300000000000044, 0.0015400000000000034], [0.0, 0.8993899999985416, 0.024399999999999176, 0.00975999999999977, 0.006319999999999911, 0.0036600000000000087, 0.0032000000000000075, 0.0020000000000000044, 0.001800000000000004, 0.0014700000000000032], [0.0, 0.903489999998523, 0.0237899999999992, 0.008869999999999807, 0.006229999999999914, 0.0035800000000000085, 0.0028000000000000065, 0.0020400000000000045, 0.001760000000000004, 0.0012200000000000025], [0.0, 0.9062999999985102, 0.0238099999999992, 0.008489999999999822, 0.005869999999999929, 0.003430000000000008, 0.0024000000000000054, 0.0019700000000000043, 0.0017300000000000039, 0.001430000000000003], [0.0, 0.9069399999985073, 0.02306999999999923, 0.008759999999999811, 0.005879999999999929, 0.0032400000000000076, 0.002980000000000007, 0.0017300000000000039, 0.0014700000000000032, 0.0013200000000000028], [0.0, 0.9097899999984943, 0.02305999999999923, 0.008569999999999819, 0.006029999999999923, 0.003390000000000008, 0.002300000000000005, 0.001770000000000004, 0.0016500000000000037, 0.001030000000000002], [0.0, 0.9111399999984882, 0.02235999999999926, 0.009249999999999791, 0.005869999999999929, 0.003380000000000008, 0.0027100000000000062, 0.0015300000000000034, 0.001410000000000003, 0.0013100000000000028], [0.0, 0.9132399999984786, 0.023499999999999212, 0.008239999999999833, 0.005509999999999944, 0.003380000000000008, 0.0023400000000000053, 0.0018300000000000041, 0.0016700000000000037, 0.0012600000000000027], [0.0, 0.9142799999984739, 0.02308999999999923, 0.00828999999999983, 0.005689999999999936, 0.003300000000000008, 0.002590000000000006, 0.0016300000000000036, 0.0017000000000000038, 0.0011600000000000024], [0.0, 0.9179399999984572, 0.02204999999999927, 0.008029999999999841, 0.005579999999999941, 0.003340000000000008, 0.002230000000000005, 0.0016900000000000038, 0.0015400000000000034, 0.001030000000000002], [0.0, 0.9189899999984524, 0.02209999999999927, 0.0076999999999998545, 0.005389999999999949, 0.003370000000000008, 0.0021000000000000046, 0.0015300000000000034, 0.0016200000000000036, 0.0011100000000000023], [0.0, 0.9204599999984457, 0.021729999999999285, 0.008579999999999819, 0.0053699999999999495, 0.0027600000000000064, 0.002210000000000005, 0.0015100000000000033, 0.0013200000000000028, 0.0008700000000000016], [0.0, 0.9214599999984412, 0.021889999999999278, 0.007289999999999871, 0.00511999999999996, 0.0028600000000000066, 0.002170000000000005, 0.0014400000000000031, 0.001390000000000003, 0.0011200000000000023], [0.0, 0.9239899999984297, 0.02183999999999928, 0.007499999999999863, 0.005429999999999947, 0.0028400000000000066, 0.0020300000000000045, 0.0013000000000000028, 0.0014500000000000032, 0.001000000000000002], [0.0, 0.9235099999984319, 0.020739999999999325, 0.007289999999999871, 0.005899999999999928, 0.002970000000000007, 0.002170000000000005, 0.001400000000000003, 0.0016000000000000035, 0.000990000000000002], [0.0, 0.9262399999984194, 0.020529999999999334, 0.00782999999999985, 0.00485999999999997, 0.002640000000000006, 0.002300000000000005, 0.0013200000000000028, 0.0012300000000000026, 0.0010800000000000022], [0.0, 0.9274599999984139, 0.02086999999999932, 0.006909999999999887, 0.004799999999999973, 0.002690000000000006, 0.0019700000000000043, 0.0012700000000000027, 0.001380000000000003, 0.0011200000000000023], [0.0, 0.9269199999984163, 0.021039999999999313, 0.00731999999999987, 0.005159999999999958, 0.002670000000000006, 0.0020500000000000045, 0.0012700000000000027, 0.0011200000000000023, 0.0009100000000000017], [0.0, 0.9284499999984094, 0.020779999999999323, 0.007549999999999861, 0.004899999999999969, 0.0027100000000000062, 0.001790000000000004, 0.0012100000000000025, 0.0011900000000000025, 0.0008400000000000016], [0.0, 0.930079999998402, 0.019809999999999363, 0.007179999999999876, 0.005039999999999963, 0.0027900000000000065, 0.0018600000000000042, 0.0012000000000000025, 0.0011100000000000023, 0.0008600000000000016], [0.0, 0.9308199999983986, 0.019829999999999362, 0.006809999999999891, 0.005219999999999956, 0.002580000000000006, 0.0019300000000000044, 0.0011800000000000024, 0.0010700000000000022, 0.0009100000000000017], [0.0, 0.9315299999983954, 0.020079999999999352, 0.007339999999999869, 0.00462999999999998, 0.002590000000000006, 0.001800000000000004, 0.0011200000000000023, 0.0011000000000000022, 0.0011100000000000023], [0.0, 0.933139999998388, 0.019759999999999365, 0.007169999999999876, 0.004639999999999979, 0.002310000000000005, 0.002160000000000005, 0.0012000000000000025, 0.0011300000000000023, 0.000980000000000002], [0.0, 0.9349399999983798, 0.01936999999999938, 0.006739999999999894, 0.004429999999999988, 0.0023800000000000054, 0.0018700000000000043, 0.0012700000000000027, 0.0011600000000000024, 0.0007400000000000013], [0.0, 0.9349999999983796, 0.020189999999999347, 0.00730999999999987, 0.005039999999999963, 0.002220000000000005, 0.0016100000000000036, 0.0009500000000000018, 0.0011100000000000023, 0.0007700000000000014], [0.0, 0.935559999998377, 0.01934999999999938, 0.006929999999999886, 0.004739999999999975, 0.0024600000000000056, 0.0018900000000000043, 0.0011200000000000023, 0.001030000000000002, 0.0008200000000000015], [0.0, 0.9359399999983753, 0.018729999999999407, 0.006789999999999892, 0.004499999999999985, 0.0023600000000000053, 0.0015600000000000034, 0.001040000000000002, 0.001390000000000003, 0.0008000000000000014], [0.0, 0.9366999999983718, 0.01984999999999936, 0.006739999999999894, 0.004529999999999984, 0.0024700000000000056, 0.0016100000000000036, 0.000990000000000002, 0.0009300000000000018, 0.0007300000000000013], [0.0, 0.9383599999983643, 0.01791999999999944, 0.006809999999999891, 0.005309999999999952, 0.0019800000000000043, 0.0017100000000000038, 0.0013000000000000028, 0.001000000000000002, 0.0005800000000000009], [0.0, 0.9390599999983611, 0.018809999999999404, 0.006169999999999917, 0.00462999999999998, 0.002200000000000005, 0.0017100000000000038, 0.001000000000000002, 0.0010800000000000022, 0.0008700000000000016], [0.0, 0.9388299999983621, 0.018449999999999418, 0.007229999999999874, 0.004299999999999993, 0.002310000000000005, 0.0016500000000000037, 0.001010000000000002, 0.000980000000000002, 0.0006800000000000011], [0.0, 0.9407399999983534, 0.017999999999999437, 0.006299999999999912, 0.004479999999999986, 0.0019300000000000044, 0.0013500000000000029, 0.001050000000000002, 0.001050000000000002, 0.0007900000000000014], [0.0, 0.9405199999983545, 0.018209999999999428, 0.006369999999999909, 0.004209999999999997, 0.002660000000000006, 0.001770000000000004, 0.0009600000000000019, 0.0008500000000000016, 0.0008100000000000015], [0.0, 0.9413599999983506, 0.01838999999999942, 0.006659999999999897, 0.004169999999999998, 0.002250000000000005, 0.001370000000000003, 0.0009400000000000018, 0.001040000000000002, 0.0006000000000000009], [0.0, 0.9414499999983502, 0.018489999999999417, 0.006319999999999911, 0.004209999999999997, 0.0023700000000000053, 0.0016500000000000037, 0.0008400000000000016, 0.0011400000000000023, 0.0008200000000000015], [0.0, 0.9417999999983486, 0.01839999999999942, 0.006439999999999906, 0.00412, 0.0020700000000000046, 0.0015800000000000035, 0.0008500000000000016, 0.0011700000000000024, 0.0009100000000000017], [0.0, 0.940849999998353, 0.018349999999999422, 0.0063999999999999075, 0.004589999999999981, 0.0019900000000000044, 0.0015300000000000034, 0.0009000000000000017, 0.0011700000000000024, 0.0008200000000000015], [0.0, 0.9431699999983424, 0.01812999999999943, 0.006409999999999907, 0.004319999999999992, 0.0020700000000000046, 0.0015800000000000035, 0.0008200000000000015, 0.000990000000000002, 0.0005700000000000008], [0.0, 0.9427099999983445, 0.017989999999999437, 0.006559999999999901, 0.004359999999999991, 0.0019500000000000045, 0.0016800000000000038, 0.0009300000000000018, 0.001040000000000002, 0.0007200000000000012], [0.0, 0.9434099999983413, 0.017959999999999438, 0.006559999999999901, 0.004489999999999985, 0.0020500000000000045, 0.001420000000000003, 0.0008800000000000017, 0.001030000000000002, 0.0006800000000000011], [0.0, 0.9432099999983422, 0.01768999999999945, 0.006499999999999903, 0.004689999999999977, 0.002160000000000005, 0.0017100000000000038, 0.0007100000000000012, 0.0009500000000000018, 0.0007300000000000013], [0.0, 0.9435699999983406, 0.01764999999999945, 0.006689999999999896, 0.004439999999999987, 0.0021400000000000047, 0.0015500000000000034, 0.001010000000000002, 0.0008900000000000017, 0.0006000000000000009], [0.0, 0.9457199999983308, 0.017609999999999452, 0.005679999999999937, 0.00437999999999999, 0.0020100000000000044, 0.0014400000000000031, 0.0007300000000000013, 0.0008200000000000015, 0.000640000000000001], [0.0, 0.9451799999983332, 0.018309999999999424, 0.0060799999999999205, 0.004519999999999984, 0.0016500000000000037, 0.0015000000000000033, 0.0007400000000000013, 0.001050000000000002, 0.0005500000000000008], [0.0, 0.9458399999983302, 0.01766999999999945, 0.006279999999999912, 0.0044599999999999865, 0.0018300000000000041, 0.0015500000000000034, 0.0008700000000000016, 0.0008300000000000015, 0.0005800000000000009], [0.0, 0.9466699999983265, 0.016859999999999483, 0.006409999999999907, 0.004399999999999989, 0.0018400000000000042, 0.0015900000000000035, 0.0009000000000000017, 0.0008900000000000017, 0.0007400000000000013], [0.0, 0.9464099999983276, 0.01768999999999945, 0.005989999999999924, 0.004649999999999979, 0.001810000000000004, 0.001420000000000003, 0.0008200000000000015, 0.0008000000000000014, 0.00042000000000000045], [0.0, 0.9474599999983229, 0.016349999999999504, 0.005769999999999933, 0.003980000000000006, 0.0018500000000000042, 0.0014800000000000032, 0.0008800000000000017, 0.0011400000000000023, 0.0007500000000000013], [0.0, 0.9486399999983175, 0.01569999999999953, 0.006189999999999916, 0.004479999999999986, 0.001780000000000004, 0.0014400000000000031, 0.0008200000000000015, 0.0008000000000000014, 0.0006900000000000012], [0.0, 0.9479199999983208, 0.017019999999999477, 0.006109999999999919, 0.004060000000000003, 0.0019800000000000043, 0.001390000000000003, 0.0007500000000000013, 0.0008400000000000016, 0.0005700000000000008], [0.0, 0.9493099999983144, 0.01595999999999952, 0.005699999999999936, 0.003960000000000007, 0.0018400000000000042, 0.0012900000000000027, 0.0008200000000000015, 0.000990000000000002, 0.0007100000000000012], [0.0, 0.9480199999983203, 0.016839999999999484, 0.005869999999999929, 0.0042899999999999935, 0.0020700000000000046, 0.0012900000000000027, 0.0007500000000000013, 0.0008900000000000017, 0.0005100000000000007]], 
    [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012900000000000027], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002240000000000005, 0.02258999999999925, 0.038660000000001166], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003350000000000008, 0.024159999999999186, 0.03822000000000103, 0.053090000000005584, 0.28718000000014643], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004259999999999995, 0.026949999999999072, 0.03717000000000071, 0.05565000000000637, 0.25601000000011526, 0.3144300000001737, 0.1629700000000222], [0.0, 0.0, 0.0, 0.0, 0.0, 0.00011, 0.006309999999999911, 0.028029999999999028, 0.03677000000000059, 0.055800000000006414, 0.22730000000008654, 0.29169000000015094, 0.16353000000002277, 0.07819000000000238, 0.04210000000000222], [0.0, 1e-05, 0.00035000000000000027, 0.002650000000000006, 0.009829999999999768, 0.030579999999998924, 0.0341999999999998, 0.0583700000000072, 0.20748000000006672, 0.2674300000001267, 0.16190000000002114, 0.08009000000000165, 0.04341000000000262, 0.030269999999998937, 0.022159999999999267], [0.0028600000000000066, 0.006879999999999888, 0.014129999999999593, 0.02427999999999918, 0.027689999999999042, 0.0660100000000071, 0.1874700000000467, 0.23842000000009766, 0.1586600000000179, 0.08138000000000115, 0.04468000000000301, 0.029389999999998973, 0.022419999999999256, 0.021899999999999278, 0.017989999999999437], [0.007229999999999874, 0.014979999999999558, 0.03200999999999913, 0.07775000000000255, 0.15908000000001832, 0.1933500000000526, 0.14261000000000185, 0.08184000000000097, 0.04618000000000347, 0.029759999999998957, 0.02236999999999926, 0.019949999999999357, 0.0189299999999994, 0.01817999999999943, 0.01568999999999953], [0.031279999999998906, 0.055510000000006325, 0.08905999999999817, 0.10886999999999049, 0.09788999999999475, 0.07018000000000549, 0.04576000000000334, 0.031009999999998906, 0.022239999999999264, 0.01842999999999942, 0.017519999999999456, 0.016769999999999487, 0.017509999999999457, 0.017569999999999454, 0.015109999999999553], [0.019199999999999388, 0.029649999999998962, 0.03809000000000099, 0.039870000000001536, 0.03431999999999984, 0.028379999999999014, 0.022139999999999268, 0.018539999999999415, 0.016619999999999493, 0.0164599999999995, 0.015129999999999552, 0.015839999999999525, 0.016049999999999516, 0.016329999999999505, 0.012779999999999648], [0.008029999999999841, 0.012159999999999673, 0.016119999999999513, 0.01742999999999946, 0.01765999999999945, 0.017869999999999442, 0.015899999999999522, 0.015109999999999553, 0.015009999999999557, 0.014789999999999566, 0.014549999999999575, 0.015469999999999538, 0.016639999999999492, 0.01541999999999954, 0.012159999999999673], [0.004209999999999997, 0.006509999999999903, 0.009689999999999773, 0.011609999999999695, 0.013649999999999612, 0.014259999999999587, 0.013859999999999604, 0.013649999999999612, 0.013599999999999614, 0.01370999999999961, 0.01490999999999956, 0.015249999999999547, 0.016089999999999514, 0.014349999999999584, 0.009599999999999777], [0.003350000000000008, 0.005469999999999945, 0.007939999999999845, 0.010429999999999743, 0.011449999999999702, 0.013539999999999617, 0.013309999999999626, 0.01269999999999965, 0.013019999999999638, 0.013099999999999635, 0.013799999999999606, 0.014159999999999591, 0.014809999999999565, 0.013599999999999614, 0.009899999999999765], [0.002620000000000006, 0.004449999999999987, 0.0065899999999999, 0.009199999999999793, 0.010829999999999727, 0.012099999999999675, 0.012199999999999671, 0.012159999999999673, 0.011549999999999698, 0.011959999999999681, 0.013639999999999613, 0.014159999999999591, 0.015049999999999555, 0.012129999999999674, 0.008499999999999822], [0.002610000000000006, 0.00414, 0.006369999999999909, 0.008889999999999806, 0.010219999999999752, 0.011569999999999697, 0.011859999999999685, 0.0114899999999997, 0.01197999999999968, 0.012139999999999674, 0.012849999999999645, 0.01417999999999959, 0.01272999999999965, 0.012369999999999664, 0.007509999999999862], [0.002290000000000005, 0.0042399999999999955, 0.006319999999999911, 0.008279999999999831, 0.010059999999999758, 0.010689999999999733, 0.011709999999999691, 0.011579999999999696, 0.01048999999999974, 0.011649999999999694, 0.012799999999999647, 0.01344999999999962, 0.01295999999999964, 0.011709999999999691, 0.006039999999999922], [0.0023700000000000053, 0.003770000000000009, 0.005619999999999939, 0.008389999999999826, 0.009409999999999785, 0.010219999999999752, 0.010649999999999734, 0.011089999999999716, 0.010609999999999736, 0.01099999999999972, 0.01223999999999967, 0.013289999999999627, 0.011609999999999695, 0.010549999999999738, 0.00535999999999995], [0.0024300000000000055, 0.0038800000000000093, 0.0056399999999999385, 0.007729999999999853, 0.009109999999999797, 0.00976999999999977, 0.010599999999999736, 0.010839999999999727, 0.010869999999999725, 0.010379999999999745, 0.012039999999999678, 0.01269999999999965, 0.011839999999999686, 0.010459999999999742, 0.004929999999999967], [0.0023400000000000053, 0.003430000000000008, 0.005729999999999935, 0.007919999999999846, 0.008659999999999815, 0.009969999999999762, 0.01051999999999974, 0.01024999999999975, 0.009329999999999788, 0.010569999999999738, 0.011759999999999689, 0.012879999999999643, 0.011159999999999714, 0.010159999999999754, 0.0043399999999999914], [0.002220000000000005, 0.003680000000000009, 0.005329999999999951, 0.007239999999999873, 0.00878999999999981, 0.009629999999999776, 0.00952999999999978, 0.00975999999999977, 0.009209999999999793, 0.009809999999999769, 0.011429999999999703, 0.01123999999999971, 0.010669999999999734, 0.008829999999999808, 0.003770000000000009], [0.0019400000000000044, 0.0032400000000000076, 0.004759999999999974, 0.006739999999999894, 0.008649999999999816, 0.009259999999999791, 0.009159999999999795, 0.009069999999999799, 0.008939999999999804, 0.00978999999999977, 0.010869999999999725, 0.011609999999999695, 0.010149999999999755, 0.00732999999999987, 0.003410000000000008], [0.0020800000000000046, 0.0031500000000000074, 0.004749999999999975, 0.0068899999999998875, 0.007519999999999862, 0.009079999999999798, 0.009229999999999792, 0.008969999999999803, 0.008939999999999804, 0.008999999999999802, 0.011089999999999716, 0.011909999999999683, 0.009379999999999786, 0.007199999999999875, 0.002960000000000007], [0.002240000000000005, 0.003030000000000007, 0.004989999999999965, 0.006899999999999887, 0.007109999999999879, 0.00853999999999982, 0.007969999999999844, 0.008729999999999813, 0.008169999999999835, 0.00877999999999981, 0.010129999999999756, 0.011679999999999692, 0.009069999999999799, 0.006109999999999919, 0.003060000000000007], [0.001810000000000004, 0.003070000000000007, 0.004739999999999975, 0.0067199999999998945, 0.007679999999999855, 0.008269999999999831, 0.008619999999999817, 0.008439999999999824, 0.00855999999999982, 0.008509999999999822, 0.009869999999999766, 0.011219999999999711, 0.008019999999999841, 0.005689999999999936, 0.003020000000000007], [0.001790000000000004, 0.003050000000000007, 0.004739999999999975, 0.006279999999999912, 0.00706999999999988, 0.007779999999999851, 0.008589999999999818, 0.008029999999999841, 0.00730999999999987, 0.008339999999999828, 0.009959999999999762, 0.010219999999999752, 0.007739999999999853, 0.005169999999999958, 0.002190000000000005], [0.0017300000000000039, 0.0025100000000000057, 0.0045099999999999845, 0.005869999999999929, 0.007089999999999879, 0.008199999999999834, 0.007459999999999864, 0.007869999999999848, 0.006759999999999893, 0.007649999999999857, 0.009139999999999796, 0.010439999999999743, 0.007499999999999863, 0.004579999999999982, 0.0018800000000000043], [0.0015600000000000034, 0.0031400000000000074, 0.004010000000000005, 0.005969999999999925, 0.006199999999999916, 0.007439999999999865, 0.007539999999999861, 0.006639999999999898, 0.006429999999999906, 0.007969999999999844, 0.009369999999999786, 0.00978999999999977, 0.00707999999999988, 0.004010000000000005, 0.001760000000000004], [0.0018300000000000041, 0.0029100000000000068, 0.0043399999999999914, 0.0061799999999999165, 0.0066699999999998965, 0.006999999999999883, 0.00756999999999986, 0.006699999999999895, 0.006549999999999901, 0.0077999999999998505, 0.008669999999999815, 0.009369999999999786, 0.006559999999999901, 0.00412, 0.0014500000000000032], [0.001780000000000004, 0.0028100000000000065, 0.004419999999999988, 0.005559999999999942, 0.006189999999999916, 0.00706999999999988, 0.006909999999999887, 0.006499999999999903, 0.006219999999999915, 0.0074299999999998655, 0.008999999999999802, 0.009369999999999786, 0.005679999999999937, 0.0036500000000000087, 0.0011400000000000023], [0.0015200000000000033, 0.0027200000000000063, 0.0041899999999999975, 0.005249999999999954, 0.006239999999999914, 0.006789999999999892, 0.006899999999999887, 0.005929999999999927, 0.005879999999999929, 0.00756999999999986, 0.008679999999999815, 0.008939999999999804, 0.005699999999999936, 0.0031100000000000073, 0.0006500000000000011], [0.0016200000000000036, 0.0028200000000000065, 0.0035800000000000085, 0.005399999999999948, 0.005469999999999945, 0.006289999999999912, 0.0063999999999999075, 0.005929999999999927, 0.006069999999999921, 0.007249999999999873, 0.009239999999999792, 0.00855999999999982, 0.004989999999999965, 0.002560000000000006, 0.0006500000000000011], [0.0016100000000000036, 0.002570000000000006, 0.0036500000000000087, 0.005329999999999951, 0.005549999999999942, 0.00681999999999989, 0.006019999999999923, 0.0050999999999999605, 0.005399999999999948, 0.007509999999999862, 0.008509999999999822, 0.008129999999999837, 0.0050499999999999625, 0.0027100000000000062, 0.0004400000000000005], [0.001420000000000003, 0.002310000000000005, 0.0038600000000000093, 0.004769999999999974, 0.0058099999999999315, 0.006219999999999915, 0.005489999999999945, 0.005389999999999949, 0.005229999999999955, 0.0072599999999998725, 0.008229999999999833, 0.00780999999999985, 0.004249999999999995, 0.0021400000000000047, 0.0002800000000000001], [0.0013400000000000029, 0.0025300000000000058, 0.003720000000000009, 0.005339999999999951, 0.005379999999999949, 0.005919999999999927, 0.005559999999999942, 0.00510999999999996, 0.004959999999999966, 0.006679999999999896, 0.008659999999999815, 0.007039999999999881, 0.004179999999999998, 0.0018200000000000041, 0.00024], [0.0013400000000000029, 0.002640000000000006, 0.0036400000000000087, 0.004669999999999978, 0.004989999999999965, 0.005889999999999928, 0.004949999999999967, 0.004979999999999965, 0.004919999999999968, 0.006639999999999898, 0.008509999999999822, 0.006799999999999891, 0.003680000000000009, 0.0016200000000000036, 9e-05], [0.0013500000000000029, 0.0021200000000000047, 0.0035900000000000085, 0.00460999999999998, 0.004969999999999966, 0.00559999999999994, 0.0050499999999999625, 0.004389999999999989, 0.0042899999999999935, 0.006199999999999916, 0.007999999999999842, 0.006659999999999897, 0.0036400000000000087, 0.0015000000000000033, 0.00017], [0.0013400000000000029, 0.002260000000000005, 0.003300000000000008, 0.004359999999999991, 0.00460999999999998, 0.005339999999999951, 0.005019999999999964, 0.003910000000000009, 0.0043399999999999914, 0.00707999999999988, 0.00831999999999983, 0.005919999999999927, 0.003070000000000007, 0.001050000000000002, 0.00011], [0.0012100000000000025, 0.0019500000000000045, 0.002950000000000007, 0.003910000000000009, 0.0044599999999999865, 0.0047799999999999735, 0.0045599999999999825, 0.0038700000000000093, 0.004739999999999975, 0.006439999999999906, 0.008149999999999836, 0.00584999999999993, 0.0030900000000000072, 0.0008500000000000016, 0.0001], [0.0012600000000000027, 0.0024700000000000056, 0.0031100000000000073, 0.004090000000000002, 0.004389999999999989, 0.004249999999999995, 0.004409999999999989, 0.003930000000000008, 0.00460999999999998, 0.006699999999999895, 0.007599999999999859, 0.005259999999999954, 0.0028600000000000066, 0.0007400000000000013, 0.0001], [0.001400000000000003, 0.0021200000000000047, 0.0031200000000000073, 0.004199999999999997, 0.004669999999999978, 0.004689999999999977, 0.004229999999999996, 0.003800000000000009, 0.004479999999999986, 0.006209999999999915, 0.007989999999999843, 0.00510999999999996, 0.002680000000000006, 0.0007000000000000012, 1e-05], [0.0011000000000000022, 0.0019400000000000044, 0.002660000000000006, 0.0039700000000000065, 0.004249999999999995, 0.0045099999999999845, 0.003950000000000007, 0.003330000000000008, 0.004219999999999996, 0.00608999999999992, 0.007289999999999871, 0.005009999999999964, 0.0024300000000000055, 0.000620000000000001, 5e-05], [0.0010800000000000022, 0.001800000000000004, 0.0027900000000000065, 0.0036100000000000086, 0.003980000000000006, 0.004249999999999995, 0.004010000000000005, 0.0036100000000000086, 0.004219999999999996, 0.006149999999999918, 0.007629999999999857, 0.004549999999999983, 0.0023900000000000054, 0.0004400000000000005, 1e-05], [0.0010900000000000022, 0.0019100000000000044, 0.0028200000000000065, 0.0035400000000000084, 0.004030000000000004, 0.004209999999999997, 0.003460000000000008, 0.0031200000000000073, 0.004100000000000001, 0.00609999999999992, 0.007049999999999881, 0.004219999999999996, 0.0020000000000000044, 0.00031000000000000016, 4e-05], [0.0011300000000000023, 0.0020000000000000044, 0.0024300000000000055, 0.0031400000000000074, 0.003770000000000009, 0.003690000000000009, 0.0035400000000000084, 0.003360000000000008, 0.004469999999999986, 0.005789999999999932, 0.006529999999999902, 0.0038500000000000092, 0.002180000000000005, 0.0003300000000000002, 1e-05], [0.0012900000000000027, 0.0019100000000000044, 0.0024100000000000055, 0.003060000000000007, 0.003710000000000009, 0.003700000000000009, 0.0032500000000000077, 0.0028600000000000066, 0.0042399999999999955, 0.005699999999999936, 0.006319999999999911, 0.003790000000000009, 0.0021100000000000047, 0.00022, 0.0], [0.001010000000000002, 0.0018200000000000041, 0.0025000000000000057, 0.0036300000000000087, 0.0030900000000000072, 0.0036600000000000087, 0.003390000000000008, 0.003000000000000007, 0.004519999999999984, 0.005759999999999934, 0.006539999999999902, 0.0036300000000000087, 0.0018600000000000042, 0.0002, 0.0], [0.0010900000000000022, 0.0015600000000000034, 0.0023900000000000054, 0.0028300000000000066, 0.0032200000000000076, 0.003710000000000009, 0.0029100000000000068, 0.0028200000000000065, 0.00437999999999999, 0.005629999999999939, 0.006369999999999909, 0.003680000000000009, 0.0016700000000000037, 0.00015000000000000001, 0.0], [0.0010700000000000022, 0.001760000000000004, 0.002310000000000005, 0.002680000000000006, 0.003420000000000008, 0.003300000000000008, 0.003000000000000007, 0.002540000000000006, 0.00461999999999998, 0.005179999999999957, 0.00633999999999991, 0.0031900000000000075, 0.0015000000000000033, 0.00013000000000000002, 0.0], [0.0008700000000000016, 0.0014600000000000032, 0.002290000000000005, 0.0027200000000000063, 0.002970000000000007, 0.003410000000000008, 0.002560000000000006, 0.002930000000000007, 0.004080000000000002, 0.004959999999999966, 0.00584999999999993, 0.003360000000000008, 0.0015000000000000033, 7.000000000000001e-05, 0.0], [0.0008300000000000015, 0.0013500000000000029, 0.002190000000000005, 0.002600000000000006, 0.0030900000000000072, 0.0029000000000000067, 0.002610000000000006, 0.0025300000000000058, 0.003820000000000009, 0.005149999999999958, 0.00633999999999991, 0.0032300000000000076, 0.0015700000000000035, 6e-05, 0.0], [0.0007300000000000013, 0.0015700000000000035, 0.0021500000000000048, 0.0028100000000000065, 0.0028200000000000065, 0.0027600000000000064, 0.0025000000000000057, 0.0023200000000000052, 0.0038600000000000093, 0.004969999999999966, 0.005489999999999945, 0.0031100000000000073, 0.001420000000000003, 6e-05, 0.0], [0.0008200000000000015, 0.001370000000000003, 0.002170000000000005, 0.002540000000000006, 0.0027300000000000063, 0.0030900000000000072, 0.002280000000000005, 0.0027200000000000063, 0.0036200000000000086, 0.004529999999999984, 0.005889999999999928, 0.0031400000000000074, 0.0011100000000000023, 8e-05, 0.0], [0.0008100000000000015, 0.0014800000000000032, 0.0021500000000000048, 0.002210000000000005, 0.0024000000000000054, 0.0027900000000000065, 0.0024200000000000055, 0.002650000000000006, 0.003760000000000009, 0.004939999999999967, 0.005919999999999927, 0.002570000000000006, 0.0010800000000000022, 1e-05, 0.0], [0.0008300000000000015, 0.0016800000000000038, 0.0019300000000000044, 0.0024300000000000055, 0.002600000000000006, 0.0027700000000000064, 0.0020800000000000046, 0.0024300000000000055, 0.0040200000000000045, 0.004569999999999982, 0.006029999999999923, 0.002920000000000007, 0.0009500000000000018, 2e-05, 0.0], [0.0007000000000000012, 0.0014800000000000032, 0.0014800000000000032, 0.0023200000000000052, 0.0024000000000000054, 0.0028200000000000065, 0.002200000000000005, 0.002220000000000005, 0.003810000000000009, 0.004689999999999977, 0.005259999999999954, 0.002310000000000005, 0.0009100000000000017, 2e-05, 0.0], [0.0006800000000000011, 0.001370000000000003, 0.001780000000000004, 0.0024300000000000055, 0.002200000000000005, 0.002600000000000006, 0.0020600000000000045, 0.0023700000000000053, 0.003820000000000009, 0.004719999999999976, 0.005779999999999933, 0.002660000000000006, 0.0009500000000000018, 1e-05, 0.0], [0.0005700000000000008, 0.001370000000000003, 0.0017200000000000039, 0.002550000000000006, 0.002310000000000005, 0.0025000000000000057, 0.0018800000000000043, 0.0023400000000000053, 0.0036100000000000086, 0.004759999999999974, 0.005379999999999949, 0.002250000000000005, 0.0007200000000000012, 1e-05, 0.0], [0.0007100000000000012, 0.0012400000000000026, 0.0020500000000000045, 0.002190000000000005, 0.0020900000000000046, 0.002300000000000005, 0.0020900000000000046, 0.0025200000000000057, 0.0031800000000000075, 0.005389999999999949, 0.004659999999999978, 0.0023400000000000053, 0.0007700000000000014, 0.0, 0.0], [0.0008200000000000015, 0.0013000000000000028, 0.0019400000000000044, 0.002300000000000005, 0.002260000000000005, 0.0021500000000000048, 0.001780000000000004, 0.0023400000000000053, 0.003450000000000008, 0.004669999999999978, 0.00534999999999995, 0.0024900000000000057, 0.0006900000000000012, 0.0, 0.0], [0.0007600000000000013, 0.0013300000000000028, 0.0016600000000000037, 0.002190000000000005, 0.002260000000000005, 0.0023300000000000052, 0.002160000000000005, 0.0019900000000000044, 0.0036000000000000086, 0.005179999999999957, 0.004399999999999989, 0.0021200000000000047, 0.0006000000000000009, 0.0, 0.0], [0.0006600000000000011, 0.0013500000000000029, 0.0016400000000000037, 0.0021300000000000047, 0.0023600000000000053, 0.002290000000000005, 0.0018300000000000041, 0.002240000000000005, 0.003700000000000009, 0.004759999999999974, 0.0045599999999999825, 0.0019000000000000043, 0.0006500000000000011, 0.0, 0.0], [0.0006700000000000011, 0.0012300000000000026, 0.0017000000000000038, 0.0021200000000000047, 0.0019900000000000044, 0.0021000000000000046, 0.001790000000000004, 0.002220000000000005, 0.0035800000000000085, 0.005169999999999958, 0.004639999999999979, 0.0019100000000000044, 0.0005300000000000007, 0.0, 0.0], [0.0007300000000000013, 0.0012300000000000026, 0.0016000000000000035, 0.0018400000000000042, 0.0016900000000000038, 0.0020400000000000045, 0.0019200000000000044, 0.0021500000000000048, 0.003770000000000009, 0.00460999999999998, 0.00460999999999998, 0.0020400000000000045, 0.0004700000000000006, 0.0, 0.0], [0.0005800000000000009, 0.0010900000000000022, 0.001740000000000004, 0.0017200000000000039, 0.0018500000000000042, 0.0020800000000000046, 0.0019100000000000044, 0.0020100000000000044, 0.003410000000000008, 0.004689999999999977, 0.004100000000000001, 0.0018900000000000043, 0.0004400000000000005, 0.0, 0.0], [0.0007700000000000014, 0.0012200000000000025, 0.0013200000000000028, 0.0014700000000000032, 0.001810000000000004, 0.0021300000000000047, 0.001780000000000004, 0.0019100000000000044, 0.003460000000000008, 0.004499999999999985, 0.00461999999999998, 0.001770000000000004, 0.00034000000000000024, 0.0, 0.0], [0.0005400000000000008, 0.0010700000000000022, 0.0014700000000000032, 0.0015900000000000035, 0.0016100000000000036, 0.001750000000000004, 0.0018900000000000043, 0.0019500000000000045, 0.0031700000000000074, 0.0045099999999999845, 0.0042399999999999955, 0.0016000000000000035, 0.0004100000000000004, 0.0, 0.0], [0.0006000000000000009, 0.0011200000000000023, 0.001370000000000003, 0.0015800000000000035, 0.0015500000000000034, 0.0020200000000000044, 0.0016400000000000037, 0.0019900000000000044, 0.003680000000000009, 0.004659999999999978, 0.004050000000000003, 0.0015300000000000034, 0.00031000000000000016, 0.0, 0.0], [0.0005800000000000009, 0.0012200000000000025, 0.0013500000000000029, 0.0016500000000000037, 0.0016600000000000037, 0.0018800000000000043, 0.0019300000000000044, 0.002220000000000005, 0.0035400000000000084, 0.004549999999999983, 0.004179999999999998, 0.0017000000000000038, 0.0004300000000000005, 0.0, 0.0], [0.0004100000000000004, 0.0010800000000000022, 0.001380000000000003, 0.0019000000000000043, 0.0017000000000000038, 0.001750000000000004, 0.001430000000000003, 0.002160000000000005, 0.0035000000000000083, 0.00486999999999997, 0.003690000000000009, 0.0013400000000000029, 0.00024, 0.0, 0.0], [0.000610000000000001, 0.000980000000000002, 0.0011900000000000025, 0.0016500000000000037, 0.0016600000000000037, 0.001740000000000004, 0.0015500000000000034, 0.0020800000000000046, 0.003420000000000008, 0.004649999999999979, 0.00412, 0.0011400000000000023, 0.00024, 0.0, 0.0], [0.0005300000000000007, 0.001050000000000002, 0.0012400000000000026, 0.0015600000000000034, 0.0016000000000000035, 0.001740000000000004, 0.0016000000000000035, 0.0019700000000000043, 0.0032900000000000078, 0.004689999999999977, 0.0036500000000000087, 0.0012200000000000025, 0.0003300000000000002, 0.0, 0.0], [0.0005700000000000008, 0.0010600000000000021, 0.0011700000000000024, 0.0014800000000000032, 0.0015000000000000033, 0.0016000000000000035, 0.0015800000000000035, 0.002160000000000005, 0.0036000000000000086, 0.004679999999999978, 0.0035500000000000084, 0.0013200000000000028, 0.0002900000000000001, 0.0, 0.0], [0.0004800000000000006, 0.001040000000000002, 0.0012100000000000025, 0.0016600000000000037, 0.0016200000000000036, 0.001810000000000004, 0.0013200000000000028, 0.0019200000000000044, 0.0032400000000000076, 0.004789999999999973, 0.0038600000000000093, 0.0011800000000000024, 0.00018, 0.0, 0.0], [0.0005500000000000008, 0.0008400000000000016, 0.0011700000000000024, 0.0015700000000000035, 0.0012400000000000026, 0.0017100000000000038, 0.0013500000000000029, 0.0020400000000000045, 0.003400000000000008, 0.004819999999999972, 0.0035400000000000084, 0.0012500000000000026, 0.00016, 0.0, 0.0], [0.0005100000000000007, 0.0009700000000000019, 0.0014500000000000032, 0.0014600000000000032, 0.0014900000000000033, 0.0014800000000000032, 0.0015400000000000034, 0.0018400000000000042, 0.0032600000000000077, 0.004739999999999975, 0.0032700000000000077, 0.0011400000000000023, 7.000000000000001e-05, 0.0, 0.0], [0.0005100000000000007, 0.0009700000000000019, 0.001040000000000002, 0.0013000000000000028, 0.0015500000000000034, 0.0016900000000000038, 0.0016400000000000037, 0.0016400000000000037, 0.003350000000000008, 0.004739999999999975, 0.003070000000000007, 0.0011000000000000022, 0.00011, 0.0, 0.0], [0.0004800000000000006, 0.0011000000000000022, 0.0011000000000000022, 0.0016100000000000036, 0.0013200000000000028, 0.0016700000000000037, 0.0015800000000000035, 0.001780000000000004, 0.0032800000000000077, 0.004229999999999996, 0.0032700000000000077, 0.0011300000000000023, 0.00011, 0.0, 0.0], [0.0005500000000000008, 0.001030000000000002, 0.0009600000000000019, 0.001370000000000003, 0.0012900000000000027, 0.001740000000000004, 0.001750000000000004, 0.0019200000000000044, 0.003730000000000009, 0.004669999999999978, 0.0032500000000000077, 0.0010900000000000022, 5e-05, 0.0, 0.0], [0.0004700000000000006, 0.0009300000000000018, 0.0013100000000000028, 0.0013100000000000028, 0.001400000000000003, 0.001780000000000004, 0.001390000000000003, 0.0018200000000000041, 0.0036300000000000087, 0.00437999999999999, 0.002600000000000006, 0.0007900000000000014, 0.00013000000000000002, 0.0, 0.0], [0.0004900000000000006, 0.0008300000000000015, 0.0011300000000000023, 0.0012800000000000027, 0.0015200000000000033, 0.0014400000000000031, 0.001430000000000003, 0.001790000000000004, 0.0034700000000000082, 0.00460999999999998, 0.002990000000000007, 0.0009700000000000019, 0.00011, 0.0, 0.0], [0.00046000000000000056, 0.001030000000000002, 0.0011600000000000024, 0.0012100000000000025, 0.0013400000000000029, 0.0015400000000000034, 0.0015000000000000033, 0.0019200000000000044, 0.0035600000000000085, 0.00437999999999999, 0.0024600000000000056, 0.0008300000000000015, 0.00013000000000000002, 0.0, 0.0], [0.0005100000000000007, 0.0008600000000000016, 0.0012800000000000027, 0.0011000000000000022, 0.0013400000000000029, 0.0016400000000000037, 0.001360000000000003, 0.0019900000000000044, 0.0035200000000000084, 0.004449999999999987, 0.0028100000000000065, 0.0007300000000000013, 6e-05, 0.0, 0.0], [0.0004400000000000005, 0.000980000000000002, 0.0010800000000000022, 0.0012800000000000027, 0.0012700000000000027, 0.0014700000000000032, 0.0014400000000000031, 0.0020400000000000045, 0.0036300000000000087, 0.0044599999999999865, 0.002560000000000006, 0.0007300000000000013, 8e-05, 0.0, 0.0], [0.0005900000000000009, 0.0009200000000000018, 0.000980000000000002, 0.0013500000000000029, 0.0012600000000000027, 0.0016800000000000038, 0.001380000000000003, 0.0019200000000000044, 0.0031800000000000075, 0.0042399999999999955, 0.002690000000000006, 0.0006900000000000012, 9e-05, 0.0, 0.0], [0.0005600000000000008, 0.0008200000000000015, 0.001040000000000002, 0.0011600000000000024, 0.0011400000000000023, 0.0013000000000000028, 0.0013400000000000029, 0.0019200000000000044, 0.0032900000000000078, 0.004489999999999985, 0.002550000000000006, 0.0007600000000000013, 5e-05, 0.0, 0.0], [0.00039000000000000037, 0.0009600000000000019, 0.001040000000000002, 0.0013000000000000028, 0.0012000000000000025, 0.0016300000000000036, 0.0012600000000000027, 0.0021400000000000047, 0.0031300000000000073, 0.004050000000000003, 0.002300000000000005, 0.0006700000000000011, 2e-05, 0.0, 0.0], [0.0004400000000000005, 0.0007700000000000014, 0.0009000000000000017, 0.0011500000000000024, 0.0014600000000000032, 0.0015000000000000033, 0.0013400000000000029, 0.0020200000000000044, 0.0032500000000000077, 0.004080000000000002, 0.002200000000000005, 0.0005500000000000008, 4e-05, 0.0, 0.0], [0.0004700000000000006, 0.0008900000000000017, 0.0009100000000000017, 0.0012400000000000026, 0.000980000000000002, 0.001390000000000003, 0.0014800000000000032, 0.0021100000000000047, 0.0032500000000000077, 0.004349999999999991, 0.002280000000000005, 0.000620000000000001, 2e-05, 0.0, 0.0], [0.0005200000000000007, 0.0007200000000000012, 0.0011100000000000023, 0.0012100000000000025, 0.0012700000000000027, 0.001390000000000003, 0.0015000000000000033, 0.002170000000000005, 0.0035100000000000083, 0.00413, 0.002270000000000005, 0.0005000000000000007, 4e-05, 0.0, 0.0], [0.00035000000000000027, 0.0008100000000000015, 0.000990000000000002, 0.001030000000000002, 0.0011700000000000024, 0.0014400000000000031, 0.0013300000000000028, 0.002220000000000005, 0.003360000000000008, 0.004110000000000001, 0.0021200000000000047, 0.0005000000000000007, 3.0000000000000004e-05, 0.0, 0.0], [0.0004700000000000006, 0.0008200000000000015, 0.0010600000000000021, 0.0011900000000000025, 0.0011800000000000024, 0.0016600000000000037, 0.0013100000000000028, 0.0016100000000000036, 0.003340000000000008, 0.004249999999999995, 0.0019900000000000044, 0.0004700000000000006, 1e-05, 0.0, 0.0], [0.00039000000000000037, 0.0008200000000000015, 0.0009500000000000018, 0.0011500000000000024, 0.0011600000000000024, 0.0016300000000000036, 0.0012300000000000026, 0.001800000000000004, 0.003720000000000009, 0.004090000000000002, 0.0020900000000000046, 0.00039000000000000037, 0.0, 0.0, 0.0], [0.00042000000000000045, 0.0008100000000000015, 0.001020000000000002, 0.0012600000000000027, 0.0012400000000000026, 0.0015300000000000034, 0.0010600000000000021, 0.0018300000000000041, 0.0035500000000000084, 0.004110000000000001, 0.0021500000000000048, 0.0004900000000000006, 0.0, 0.0, 0.0]] )


def random_on_random():
    #@todo correct genome size ply
    return ( [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1e-05, 1e-05, 0.00012, 0.0006900000000000012, 0.0018300000000000041, 0.004249999999999995, 0.009609999999999777, 0.018489999999999417], [0.0, 0.021399999999999298, 0.08551999999999954, 0.16039000000001963, 0.20463000000006387, 0.19538000000005462, 0.14808000000000732, 0.0938899999999963, 0.04882000000000428, 0.023979999999999193], [0.0, 0.3863300000002456, 0.36561000000022487, 0.17628000000003552, 0.05583000000000642, 0.012409999999999663, 0.0031000000000000073, 0.0003600000000000003, 6e-05, 2e-05], [0.0, 0.7864499999990556, 0.18924000000004848, 0.022149999999999267, 0.0019700000000000043, 0.00019, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9423399999983462, 0.05586000000000643, 0.001750000000000004, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9846499999981536, 0.01517999999999955, 0.00017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9963099999981005, 0.0036700000000000088, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9989899999980884, 0.001010000000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9997399999980849, 0.00026000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9999699999980839, 3.0000000000000004e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9999999999980838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9999999999980838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999980838, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999980838, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9563699999982823, 0.04363000000000269, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8868099999985989, 0.11318999999998881, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.002190000000000005, 0.8980899999985476, 0.09971999999999404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.029999999999998948, 0.10794999999999084, 0.36588000000022514, 0.43697000000029623, 0.024189999999999184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0114799999999997, 0.00584999999999993, 0.0005800000000000009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]] )



def ambiguity_per_length():
    high = 99
    low = 1
    data1_, data2_ = genome_on_genome()

    data1 = []
    for row in data1_:
        data1.append( [] )
        for ele in row:
            data1[-1].append(ele * (high-low) + low)
    data2 = []
    for row in data2_:
        data2.append( [] )
        for ele in row:
            data2[-1].append(ele * (high-low) + low)

    r1max = 10
    r2size = 15
    min_len=1
    max_len=100


    color_mapper = LogColorMapper(
                    palette=heatmap_palette(light_spec_approximation, 256),
                    low=low,
                    high=high
                )

    plot = figure(title="ambiguity on human genome",
            x_range=(0,r1max), y_range=(min_len, max_len),
            x_axis_label='ambiguity', y_axis_label='sequence length',
            plot_width=resolution, plot_height=resolution,
            min_border_bottom=10, min_border_top=10,
            min_border_left=10, min_border_right=15,
            x_axis_type=None, y_axis_type=None
        )
    for index, row in enumerate(data1):
        plot.image(image=[[row]], color_mapper=color_mapper,
                dh=[.6], dw=[r1max], x=[0], y=[min_len + index + 0.2])

    plot2 = figure(x_range=(r1max,2**r2size+r1max), y_range=(min_len, max_len),
            min_border_bottom=10, min_border_top=10,
            min_border_left=20, min_border_right=15,
            plot_width=resolution*3/4, plot_height=resolution,tools=[],
            x_axis_type="log"
        )
    for index, row in enumerate(data2):
        plot2.image(image=[[row]], color_mapper=color_mapper,
            dh=[.6], dw=[2**r2size+r1max], x=[r1max], y=[min_len + index + 0.2])

    ticks = []
    num_ticks = 6
    for tick in range(num_ticks):
        ticks.append( math.exp( (tick/float(num_ticks-1)) * math.log(high)) )#(*(high-low)) / float(math.exp(num_ticks)) + low )

    print(ticks)

    size = "12pt"
    #color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0), ticker=FixedTicker(ticks=ticks))
    color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0))
    color_bar.major_label_text_font=font
    color_bar.major_label_text_font_size=size
    #color_bar.label_standoff = 20

    ticker = SingleIntervalTicker(interval=1, num_minor_ticks=0)
    plot.add_layout(LinearAxis(ticker=ticker), 'left')
    plot.add_layout(LinearAxis(ticker=ticker), 'below')
    plot.add_layout(color_bar, 'left')
    plot.legend.label_text_font=font
    plot.background_fill_color = dark_greys[2]
    plot.background_fill_alpha = 1
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.axis.major_label_text_font_size=size
    plot.xaxis.major_label_standoff = 15
    plot.xaxis.minor_tick_line_color = None
    plot.yaxis.minor_tick_line_color = None
    plot.grid.grid_line_color = None

    plot2.legend.label_text_font=font
    plot2.yaxis.visible = False
    plot2.background_fill_color = dark_greys[2]
    plot2.background_fill_alpha = 1
    plot2.axis.axis_label_text_font=font
    plot2.axis.major_label_text_font_size=size
    plot2.axis.major_label_text_font=font
    plot2.xaxis.major_label_standoff = 15
    plot2.grid.grid_line_color = None

    save([[plot, plot2]], "ambiguityPerQueryLen", True)

def theoretical_max_acc():

    def binomial_no_success(n, p):
        return (1-p)**n

    """
    def prob_x_exists(x_len, ref_len):
        p = 0.25**x_len # (1/4)^x_len
        n = ref_len - x_len
        return 1-binomial_no_success(n,p)
    """

    def prob_non_enclosed(x_len, ref_len):
        expected_num_matches = (0.25**x_len) * (ref_len - x_len)
        prob_extendable = 1.0 - 3.0/4.0 ** 2
        return binomial_no_success(expected_num_matches, prob_extendable)

    def prob_all_non_enclosed(li, ref_len):
        ret = 1.0
        # compute weather all are enclosed
        for x in li:
            ret *= 1-prob_non_enclosed(x, ref_len)
        # return opposite
        return 1-ret

    def exp_match_amount(x_len, ref_len):
        p = 0.25**x_len
        n = ref_len - x_len
        return n*p

    ref_len = 3000000000 # three billion => human genome length
    q_len = 1000
    indel_size = 100
    prob_refindable = []
    quality = 20
    depth = 16
    max_missmatches = 0
    check_for_min_size_instead = None

    print("creating query length matrix...")
    max_indels = int(q_len/indel_size)*2
    for num_mut in range(0, q_len, max(10,int(q_len/quality))):
        prob_refindable.append( [] )
        for num_indel in range(0,max_indels, max(2,int(max_indels/quality))):
            q_len_e = simulate_max_length(q_len, num_mut, num_indel, indel_size, depth, max_missmatches)
            if q_len_e is None:
                prob_refindable[-1].append(float('NaN'))
            else:
                probs = []
                for x in q_len_e:
                    if check_for_min_size_instead is None:
                        probs.append(prob_all_non_enclosed(x, ref_len))
                    else:
                        p = 0
                        for e in x:
                            if e >= check_for_min_size_instead:
                                p = 1
                        probs.append(p)
                prob_refindable[-1].append(avg(probs))
            #prob_refindable[-1].append(q_len_e)
        if num_mut % 100 == 0:
            print(num_mut, "/", q_len)
    print("done")

    w = q_len
    h = max_indels

    color_mapper = LinearColorMapper(
                        palette=heatmap_palette(light_spec_approximation, 127),
                        low=0,
                        high=1
                    )

    tick_formater = FuncTickFormatter(code="""
        return Math.max(Math.floor( (tick+1)/2),0) + '; ' +
                Math.max(Math.floor( (tick)/2),0)"""
        )
    #tick_formater = FuncTickFormatter(code="return 'a')

    plot = figure(title="theoretical max accuracy",
            x_range=(0,h), y_range=(0,w),
            x_axis_label='num ' + str(indel_size) + ' nt insertions; num ' + str(indel_size) + ' nt deletions', y_axis_label='num mutations'
        )
    plot.xaxis.formatter = tick_formater
    plot.image(image=[prob_refindable], color_mapper=color_mapper,
            dh=[w], dw=[h], x=[0], y=[0])

    color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0))

    plot.add_layout(color_bar, 'left')

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.legend.label_text_baseline="bottom"
    save(plot, "upperBound")


#static stuff
I = "I"
M = "M"
MM = "\=M"
D = "D"
query =     [                         "T", "A", "C", "A", "T", "T", "C", "T" ]
reference = ["T", "T", "C", "A", "G",           "C", "A", "T", "A", "C", "T", "C", "A"]
l_alignment = [D,D,I,I,M,M,D,D,D,M,MM,M,M,D]

def seed_shadows():
    min_x = -1.0
    min_y = -1.0
    max_x = 13
    max_y = 8
    plot = figure(
                title="Figure X: Shadows",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    # x y size draw_shadow?
    seeds = [
        (1.5,1.5,2, orange),
        (5.5,2.5,2, green),
        (-.5,3.5,3, blue)
    ]

    for x, y, size, color in seeds:
        patch_x = []
        patch_y = []

        patch_x.append(min_x)
        patch_y.append(y)
        patch_x.append(x)
        patch_y.append(y)
        patch_x.append(x + size)
        patch_y.append(y + size)
        patch_x.append(x + size)
        patch_y.append(max_y)
        patch_x.append(min_x)
        patch_y.append(max_y)
        patch_x.append(float('nan'))
        patch_y.append(float('nan'))
        patch_x.append(x)
        patch_y.append(min_y)
        patch_x.append(x)
        patch_y.append(y)
        patch_x.append(x + size)
        patch_y.append(y + size)
        patch_x.append(max_x)
        patch_y.append(y + size)
        patch_x.append(max_x)
        patch_y.append(min_y)
        patch_x.append(float('nan'))
        patch_y.append(float('nan'))

        plot.patch(
                patch_x,
                patch_y,
                fill_color=color,
                fill_alpha=.3,
                line_color=None,
                #line_width=2,
                #line_dash=[2,2],
            )

    for x, y, size, color in seeds:
        seeds_x = []
        seeds_y = []
        seeds_x.append(x)
        seeds_x.append(x + size)
        seeds_x.append(float('nan'))
        seeds_y.append(y)
        seeds_y.append(y + size)
        seeds_y.append(float('nan'))

        plot.line(
                seeds_x,
                seeds_y,
                color=color,
                line_width=5
            )
    """
    plot.patch(
            [seeds[-2][0]+seeds[-2][2], max_x, max_x, seeds[-2][0], seeds[-2][0]],
            [seeds[-2][1]+seeds[-2][2], seeds[-2][1]+seeds[-2][2], min_y, min_y, seeds[-2][1]],
            fill_color=dark_greys[2],
            fill_alpha=.5,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    """

    plot.line(
            [min_x, seeds[0][0], seeds[0][0]+1, seeds[1][0], seeds[1][0]+5.5],
            [min_y, seeds[0][1], seeds[0][1]+1, seeds[1][1], max_y],
            color="black",
            line_dash=[2,2],
            line_width=2
        )


    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "shadows")

def alignment():
    plot = figure(
                title="Figure 1",
                plot_width=resolution, plot_height=resolution,
                x_axis_label = "reference", y_axis_label = "query"
            )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None

    cur_x = -.5
    cur_y = -.5
    m_x = []
    m_y = []
    mm_x = []
    mm_y = []
    i_x = []
    i_y = []
    d_x = []
    d_y = []

    c_alignment = []
    for symbol in l_alignment:
        if len(c_alignment) > 0 and c_alignment[-1][0] == symbol:
            c_alignment[-1] = (symbol, c_alignment[-1][1]+1)
        else:
            c_alignment.append( (symbol,1) )

    for symbol, amount in c_alignment:
        if symbol == I:
            i_x.append([cur_x, cur_x])
            i_y.append([cur_y, cur_y+amount])
            cur_y += amount
        elif symbol == D:
            d_x.append([cur_x, cur_x+amount])
            d_y.append([cur_y, cur_y])
            cur_x += amount
        elif symbol == M:
            m_x.append([cur_x, cur_x+amount])
            m_y.append([cur_y, cur_y+amount])
            cur_x += amount
            cur_y += amount
        elif symbol == MM:
            mm_x.append([cur_x, cur_x+amount])
            mm_y.append([cur_y, cur_y+amount])
            cur_x += amount
            cur_y += amount

    plot.multi_line(
            m_x,
            m_y,
            legend="ma",
            color=green,
            line_width=5
        )

    plot.multi_line(
            mm_x,
            mm_y,
            legend="mm",
            color=orange,
            line_width=5
        )

    plot.multi_line(
            i_x,
            i_y,
            legend="ins_____",
            color=blue,
            line_width=5
        )

    plot.multi_line(
            d_x,
            d_y,
            legend="del",
            color=purple,
            line_width=5
        )

    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = None
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)


    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="bottom"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "alignment")

def stripOfConsideration():
    plot = figure(
                title="Figure X: Strip of consideration",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.patch(
            [-.5,7.5,12.5,12.5,5.5],
            [-.5,7.5,7.5,6.5,-.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )


    plot.line(
        [-.5,7.5],
        [-.5,7.5],
        color=green,
        line_width=1,
        line_dash=[2,2]
    )

    plot.line(
        [5.5,12.5],
        [-.5,6.5],
        color=green,
        line_width=1,
        line_dash=[2,2]
    )

    plot.line(
        [4.5,7.5],
        [1.5,4.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [2.5,4.5],
        [-.5,1.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )


    plot.line(
        [10.5,11.5],
        [1.5,2.5],
        color=orange,
        line_width=3
    )
    plot.line(
        [8.5,10.5],
        [-.5,1.5],
        color=orange,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [1.5,2.5],
        [1.5,2.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [-.5,1.5],
        [-.5,1.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [-.5,2.5],
        [3.5,6.5],
        color=orange,
        line_width=3
    )
    plot.line(
        [-1.0,-.5],
        [3.0,3.5],
        color=orange,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [0.5,1.5],
        [-.5,0.5],
        color=blue,
        line_width=3
    )

    plot.line(
        [9.5,11.5],
        [4.5,6.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [4.5,9.5],
        [-.5,4.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "stripOfConsideration")


def forced_gap():
    plot = figure(
                #title="Figure X: Forced Gaps",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.line(
        [-1,9],
        [-1,9],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )
    plot.line(
        [1.5,3.5],
        [1.5,3.5],
        color=blue,
        line_width=3
    )

    plot.line(
        [2,12],
        [-1,9],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )
    plot.line(
        [8.5,10.5],
        [5.5,7.5],
        color=blue,
        line_width=3
    )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "forcedGap")


def optimal_matching():
    min_x = -1.0
    min_y = -1.0
    max_x = 13
    max_y = 8
    plot = figure(
                title="Figure X: Optimal matching",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.patch(
            [1.5,1.5,4.5,4.5],
            [.5,1.5,1.5,0.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    plot.patch(
            [10.5,10.5,max_x,max_x],
            [5.5,max_y,max_y,5.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    plot.patch(
            [min_x,min_x,0.5,0.5],
            [min_y,-.5,-.5,min_y],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )

    plot.line(
        [0.5,1.5],
        [-.5,0.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [4.5,7.5],
        [1.5,4.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [9.5,10.5],
        [4.5,5.5],
        color=blue,
        line_width=3
    )


    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "optimalMatching")

def unrelated_non_enclosed_seeds():
    plot = figure(
                plot_width=resolution, plot_height=resolution/2,
                y_range=["reference", "1", "2", "3", "query1", "query2", "query3", "query4"]
            )

    seeds = [
        ("query1", 0, [450], green, 7),
        ("query1", 7, [500], green, 13),
        ("query1", 24, [525], green, 13),
        ("query1", 47, [547], green, 24),

        ("query2", 5, [270], orange, 3),
        ("query2", 22, [150], blue, 5),
        ("query2", 36, [1200], blue, 20),
        
        ("query3", 6, [20,1340], orange, 2),
        ("query3", 19, [1500], blue, 4),
        ("query3", 35, [320, 1150, 1477], orange, 3),
        ("query3", 46, [1000], orange, 13),

        ("query4", 20, [30, 750], orange, 4),
        ("query4", 33, [800], orange, 4),
    ]

    max_q = 0
    max_r = 0
    for seed in seeds:
        if max_q < seed[1] + seed[-1]:
            max_q = seed[1] + seed[-1]
        if max_r < seed[2][-1] + seed[-1]:
            max_r = seed[2][-1] + seed[-1]

    r_fac = max_q/float(max_r)
    for seed in seeds:
        for end in seed[2]:
            plot.patch(
                [seed[1]+seed[-1], (end+seed[-1])*r_fac, end*r_fac, seed[1]],
                [seed[0], "reference", "reference", seed[0]],
                fill_color=seed[-2],
                fill_alpha=.3,
                line_color=None,
            )
    plot.line([0, max_q], ["reference", "reference"], color="black", line_width=3)
    for seed in seeds:
        plot.line([seed[1], seed[1] + seed[-1]], [seed[0], seed[0]], color=seed[-2], line_width=3)



    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.minor_tick_line_color = None
    plot.yaxis.minor_tick_line_color = None
    plot.xaxis.major_label_text_alpha = 0
    plot.toolbar.logo = None
    plot.toolbar_location = None
    plot.grid.grid_line_color = None
    #plot.xgrid.ticker = FixedTicker(ticks=[-5,3,6,21,25,40])
    save(plot, "unrelatedNonEnclosedSeeds")

def required_nmw_band_size():
    data = ([0.429135585783255, 0.0013163668275559457, 0.00153576129881527, 0.0013163668275559457, 0.00021939447125932427, 0.0, 0.0006581834137779728, 0.002193944712593243, 0.0013163668275559457, 0.0026327336551118918, 0.0026327336551118918, 0.0035103115401491896, 0.0024133391838525673, 0.0039491004826678385, 0.005265467310223785, 0.004607283896445812, 0.0063624396665204076, 0.004826678367705136, 0.005704256252742434, 0.006581834137779732, 0.007020623080298381, 0.00548486178148311, 0.005923650724001759, 0.006581834137779732, 0.007678806494076354, 0.007678806494076354, 0.0068012286090390565, 0.008336989907854328, 0.008775778850372977, 0.006581834137779732, 0.008775778850372977, 0.009214567792891626, 0.009653356735410274, 0.013163668275559466, 0.010969723562966221, 0.013163668275559466, 0.012286090390522168, 0.011627906976744195, 0.01382185168933744, 0.011189118034225546, 0.009653356735410274, 0.013163668275559466, 0.011847301448003519, 0.016235190873190006, 0.014918824045634061, 0.01842913558578325, 0.010969723562966221, 0.015796401930671358, 0.011627906976744195, 0.20645019745502155], [0.9785914757525838, 0.00019580967299784609, 0.00019580967299784609, 9.790483649892306e-05, 9.790483649892306e-05, 9.790483649892306e-05, 9.790483649892306e-05, 0.00013053978199856407, 0.00019580967299784609, 0.00016317472749820508, 6.526989099928203e-05, 9.790483649892306e-05, 0.00019580967299784609, 9.790483649892306e-05, 0.0002284446184974871, 0.00019580967299784609, 0.00019580967299784609, 0.0002284446184974871, 3.2634945499641017e-05, 0.00016317472749820508, 0.00026107956399712813, 0.0002284446184974871, 0.00032634945499641015, 0.00013053978199856407, 0.0004568892369949742, 0.00029371450949676914, 0.00026107956399712813, 0.00032634945499641015, 0.00035898440049605116, 0.0005221591279942563, 0.0004242542914953332, 0.0005547940734938973, 0.00039161934599569217, 0.00039161934599569217, 0.00039161934599569217, 0.0005221591279942563, 0.0006200639644931795, 0.0004242542914953332, 0.0006526989099928205, 0.00032634945499641015, 0.0005221591279942563, 0.0005221591279942563, 0.0005547940734938973, 0.0006853338554924616, 0.00039161934599569217, 0.0006853338554924616, 0.0005221591279942563, 0.0004895241824946152, 0.0004242542914953332, 0.005972195026434325])

    num_buckets = len(data[0])
    if len(data[1]) != num_buckets:
        print("WARNING LENGTHS DIFFER")
    w = 1.0 / (num_buckets)
    buckets_x = []
    for index in range(num_buckets):
        buckets_x.append(index/float(num_buckets))
    print(buckets_x)
    print(w)

    plot = figure(
            title="Figure X: required DP band size",
            plot_width=resolution, plot_height=resolution,
            x_axis_label='relative size required', y_axis_label='relative amount'
        )

    #plot.vbar(x=buckets_x, bottom=0, top=data[1], width=w, color=greys[0], legend=value("inaccurate"))
    #plot.vbar(x=buckets_x, bottom=0, top=data[0], width=w, color="black", legend=value("accurate"))
    for i in range(num_buckets):
        l = buckets_x[i]
        r = l + w
        if data[0][i] < data[1][i]:
            plot.quad(left=l, bottom=-0.001, top=data[1][i], right=r, color=greys[0], line_width=0, legend=value("inaccurate"))
        plot.quad(left=l, bottom=-0.001, top=data[0][i], right=r, fill_color="black", line_width=0, legend=value("accurate"))
        if data[0][i] > data[1][i]:
            plot.quad(left=l, bottom=-0.001, top=data[1][i], right=r, color=greys[0], line_width=0, legend=value("inaccurate"))


    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="bottom"
    plot.axis.axis_label_text_font=font
    plot.axis.axis_label_text_baseline="bottom"
    plot.axis.major_label_text_font=font
    plot.xaxis.major_label_standoff = 10
    plot.xgrid.grid_line_color = None
    plot.toolbar.logo = None
    plot.toolbar_location = None
    plot.legend.location = "top_center"
    save(plot, "nmwBandSize")

# actually call the functions that create the pictures

#unrelated_non_enclosed_seeds()
#forced_gap()
ambiguity_per_length()
#theoretical_max_acc()
#seed_shadows()
#alignment()
#stripOfConsideration()
#optimal_matching()
#required_nmw_band_size()
