from bokeh.plotting import figure, output_file, show
from bokeh.layouts import row, column, gridplot
from bokeh.models import Arrow, OpenHead, NormalHead, VeeHead, AdaptiveTicker, FixedTicker
from bokeh.palettes import d3
from bokeh.io import export_png, export_svgs
from bokeh.models import FuncTickFormatter, FixedTicker, Label, ColorBar, FactorRange
from bokeh.models import LinearAxis, Range1d, LogColorMapper, FixedTicker, LinearColorMapper
from bokeh.models import ColumnDataSource, CompositeTicker, SingleIntervalTicker, BasicTickFormatter
from bokeh.transform import dodge
from bokeh.core.properties import value
import math
import random
import numpy as np


font = "Helvetica"

dark_greys = [
        "#9f9f9f",
        "#939393",
        "#868686",
]

green = "#77933C"
blue = "#376092"
red = "#953735"
purple = "#604A7B"
orange = "#E46C0A"

greys = [
        "#acacac",
        "#b9b9b9",
        "#c6c6c6",
        "#d3d3d3",
        "#dfdfdf",
        "#ececec",
        "#f9f9f9"
    ]

def light_spec_approximation(x):
    #map input [0, 1] to wavelength [350, 645]
    w = 370 + x * (645-370)
    r = 0.0
    g = 0.0
    b = 0.0
    if w < 440:
        r = -(w - 440.) / (440. - 380.)
        b = 1.0
    elif w >= 440 and w < 490:
        g = (w - 440.) / (490. - 440.)
        b = 1.0
    elif w >= 490 and w < 510:
        g = 1.0
        b = -(w - 510.) / (510. - 490.)
    elif w >= 510 and w < 580:
        r = (w - 510.) / (580. - 510.)
        g = 1.0
    elif w >= 580 and w < 645:
        r = 1.0
        g = -(w - 645.) / (645. - 580.)
    elif w >= 645:
        r = 1.0

    #intensity
    i = 1.0
    if w > 650:
        i = .3 + .7*(780-w)/(780-650)
    elif w < 420:
        i = .3 + .7*(w-380)/(420-380)

    #gamma
    m = .8

    return (i*r**m,i*g**m,i*b**m)
"""
for x in np.linspace(0, 1, 100):
    def format(rgb):
        def clamp(x):
            return int(max(0, min(x*255, 255)))
        r, g, b = rgb
        return (clamp(r),clamp(g),clamp(b))
    print(format(light_spec_approximation(x)))
"""

def heatmap_palette(scheme, num_colors):
    def format(rgb):
        def clamp(x):
            return max(0, min(x, 255))
        red, green, blue = rgb
        return "#{0:02x}{1:02x}{2:02x}".format(clamp(int(red * 255)), clamp(int(green * 255)),
                                               clamp(int(blue * 255)))
    return [format(scheme(x)) for x in np.linspace(0, 1, num_colors)]

def simulate_max_length(q_len, mutation_amount, indel_amount,
                        indel_size, sim_amount, max_missmatches
                       ):
    match_lens = []
    if mutation_amount + indel_amount/2 * indel_size >= q_len:
        return None
    for _ in range(sim_amount):
        q = []
        for index in range(q_len):
            q.append(index)
        ##
        # helper function
        # returns a list (amount elements) of random indices that are part of [0, interval_length]
        # and at least min_distance apart from each other
        #
        # if it is not possible to fit enough indices into [0, interval_length] the last indices 
        # are behind interval_length
        def get_random_spots(amount, interval_length, min_distance):
            spots = []
            for index in range(interval_length - min_distance):
                spots.append(index)
            random.shuffle(spots)
            spots = spots[:amount]
            spots.sort()
            for index in range(1,len(spots)):
                if spots[index-1] + min_distance + 1 > spots[index]:
                    spots[index] = spots[index-1] + min_distance + 1
            if len(spots) >=1 and spots[-1] > interval_length:
                start = spots[0]
                for index in range(len(spots)):
                    spots[index] -= start
            return spots

        deletion_amount = int(indel_amount/2)
        insertion_amount = int( (indel_amount+1) /2)

        # deletion
        deletion_spots = get_random_spots(deletion_amount, len(q), indel_size + 1)
        for pos in reversed(deletion_spots):
            q = q[:pos] + q[pos + indel_size:]

        # mutations
        mutation_spots = []
        for index in range(len(q)):
            mutation_spots.append(index)
        random.shuffle(mutation_spots)
        for pos in mutation_spots[:mutation_amount]:
            l = len(q)
            q = q[:pos] + [-2] + q[pos+1:]
            if not len(q) == l:
                print("ERROR: mutation changed query length:" + str(l) + " != " + str(len(q)))
                print(q)

        # insertion
        insertion_spots = get_random_spots(insertion_amount, len(q), 1)
        # pos are sorted in order to we need to reverse them in order 
        # to not insert twice at the same location
        for pos in reversed(insertion_spots):
            for _ in range(indel_size):
                q = q[:pos] + [-2] + q[pos:]

        #get the starting positions for every match
        starts = []
        last = -1
        s_ind = 0
        for ind, num in enumerate(q):
            if num != last + 1:
                starts.append(s_ind)
                s_ind = ind
            last = num
        starts.append(s_ind)

        # get the results
        matches = []
        for start in starts:
            length = 0
            num_mm = 0
            while start+length+1 < len(q) and num_mm <= max_missmatches:
                if q[start] + length + 1 != q[start+length+1]:
                    num_mm += 1
                length += 1
            matches.append(length)

        match_lens.append(matches)

    return match_lens

def only_max(li):
    ret = []
    if li is None:
        return None
    for l in li:
        ret.append(0)
        for x in l:
            if x > ret[-1]:
                ret[-1] = x
    return ret

def mean(li):
    if li is None:
        return float('NaN')
    return sorted(li)[int(len(li)/2)]

def avg(li):
    if li is None:
        return float('NaN')
    avg = 0
    for x in li:
        avg += x
    return avg / len(li)

def save(plot, name, grid=False):
    if grid:
        export_png(gridplot(plot), filename="paperGraphics/" + name + ".png")
        for r in plot:
            for p in r:
                p.output_backend = "svg"
        export_svgs(gridplot(plot), filename="paperGraphics/" + name + ".svg")
    else:
        export_png(plot, filename="paperGraphics/" + name + ".png")
        plot.output_backend = "svg"
        export_svgs(plot, filename="paperGraphics/" + name + ".svg")
    #show(plot)

resolution = 300
min_x = 0
min_y = 0
max_x = 10
max_y = 10

def human():
    return (10, 20, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 2e-05, 0.00014000000000000001, 0.00038000000000000035, 0.0007400000000000013, 0.001410000000000003, 0.001750000000000004, 0.002230000000000005, 0.002540000000000006, 0.002970000000000007], [0.0, 0.003990000000000006, 0.008439999999999824, 0.011819999999999687, 0.011859999999999685, 0.011429999999999703, 0.009809999999999769, 0.009009999999999801, 0.008189999999999835, 0.008129999999999837], [0.0, 0.034579999999999916, 0.03641000000000048, 0.03416999999999979, 0.03389999999999971, 0.033599999999999616, 0.03525000000000012, 0.03548000000000019, 0.035820000000000296, 0.03276999999999936], [0.0, 0.13249999999999174, 0.11543999999998794, 0.09854999999999449, 0.08094000000000132, 0.06261000000000842, 0.04845000000000416, 0.03793000000000094, 0.028799999999998997, 0.024369999999999177], [0.0, 0.33698000000019623, 0.17911000000003835, 0.09322999999999655, 0.05278000000000549, 0.0332099999999995, 0.02207999999999927, 0.01591999999999952, 0.01224999999999967, 0.009649999999999775], [0.0, 0.5375900000001882, 0.1390699999999983, 0.049370000000004445, 0.02476999999999916, 0.014889999999999562, 0.010549999999999738, 0.00782999999999985, 0.006319999999999911, 0.005129999999999959], [0.0, 0.6550799999996535, 0.08761999999999873, 0.02696999999999907, 0.013969999999999599, 0.009579999999999778, 0.006789999999999892, 0.005529999999999943, 0.004759999999999974, 0.003770000000000009]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004539999999999983, 0.026609999999999086, 0.03803000000000097, 0.05451000000000602, 0.25650000000011575, 0.314730000000174, 0.16332000000002256], [0.0, 0.0, 0.0, 0.0, 0.0, 0.00011, 0.006929999999999886, 0.028129999999999024, 0.03740000000000078, 0.056420000000006604, 0.23122000000009046, 0.28919000000014844, 0.1613500000000206, 0.07822000000000237, 0.041400000000002005], [1e-05, 4e-05, 0.0002800000000000001, 0.002980000000000007, 0.00977999999999977, 0.030809999999998915, 0.034179999999999794, 0.060110000000007734, 0.20739000000006663, 0.26612000000012537, 0.16214000000002138, 0.07999000000000168, 0.04295000000000248, 0.030139999999998942, 0.021529999999999293], [0.0032800000000000077, 0.00682999999999989, 0.014469999999999579, 0.02352999999999921, 0.02848999999999901, 0.06298000000000828, 0.1855500000000448, 0.24028000000009953, 0.1582600000000175, 0.0830300000000005, 0.04485000000000306, 0.030089999999998944, 0.022519999999999252, 0.021919999999999277, 0.017789999999999445], [0.007439999999999865, 0.014759999999999567, 0.031409999999998946, 0.07921000000000199, 0.16109000000002033, 0.1908600000000501, 0.14201000000000125, 0.08162000000000105, 0.045550000000003275, 0.028709999999999, 0.023399999999999217, 0.01985999999999936, 0.01911999999999939, 0.0188899999999994, 0.01570999999999953], [0.030579999999998924, 0.05552000000000633, 0.0892199999999981, 0.10924999999999034, 0.09870999999999443, 0.07081000000000524, 0.0449700000000031, 0.030249999999998937, 0.022249999999999263, 0.019439999999999378, 0.01692999999999948, 0.017479999999999458, 0.018509999999999416, 0.017719999999999448, 0.014969999999999558], [0.019499999999999375, 0.03063999999999892, 0.038170000000001016, 0.04083000000000183, 0.035330000000000146, 0.02818999999999902, 0.0213699999999993, 0.018469999999999417, 0.016769999999999487, 0.015869999999999523, 0.015889999999999523, 0.01593999999999952, 0.016799999999999485, 0.016529999999999496, 0.013259999999999628], [0.007989999999999843, 0.011589999999999696, 0.015609999999999532, 0.017609999999999452, 0.017279999999999466, 0.01719999999999947, 0.014719999999999568, 0.015329999999999544, 0.01490999999999956, 0.014649999999999571, 0.014589999999999574, 0.015579999999999533, 0.016329999999999505, 0.01594999999999952, 0.012079999999999676], [0.004090000000000002, 0.00682999999999989, 0.009459999999999783, 0.012039999999999678, 0.013389999999999623, 0.013659999999999612, 0.013809999999999606, 0.013789999999999606, 0.013489999999999619, 0.014079999999999595, 0.014069999999999595, 0.01443999999999958, 0.015629999999999533, 0.014709999999999569, 0.010959999999999722], [0.0034900000000000083, 0.005249999999999954, 0.007869999999999848, 0.009849999999999767, 0.012129999999999674, 0.012399999999999663, 0.01319999999999963, 0.012669999999999652, 0.012939999999999641, 0.012589999999999655, 0.013919999999999601, 0.014889999999999562, 0.014509999999999577, 0.013829999999999605, 0.009319999999999789]])

def random():
    return (10, 20, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e-05, 7.000000000000001e-05, 6e-05, 0.00025], [0.0, 0.003450000000000008, 0.020979999999999315, 0.058290000000007176, 0.1090899999999904, 0.15201000000001125, 0.17220000000003144, 0.158750000000018, 0.12592999999998516, 0.08625999999999925], [0.0, 0.2470500000001063, 0.343760000000203, 0.2416600000001009, 0.1134699999999887, 0.03949000000000142, 0.01122999999999971, 0.0027600000000000064, 0.0004400000000000005, 0.00012], [0.0, 0.7074399999994152, 0.243760000000103, 0.04306000000000251, 0.005209999999999956, 0.0005000000000000007, 3.0000000000000004e-05, 0.0, 0.0, 0.0], [0.0, 0.9166399999984631, 0.08018000000000161, 0.003050000000000007, 0.00013000000000000002, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9796099999981766, 0.020209999999999347, 0.00018, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999980838, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999980838, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999980838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.026329999999999097, 0.9736699999982036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0008400000000000016, 0.005139999999999959, 0.06019000000000776, 0.5426300000001653, 0.39037000000024963, 0.0004400000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.05491000000000614, 0.04618000000000347, 0.011689999999999692, 0.00026000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1e-05, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])

def plasmodium_large():
    return (1, 100, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1e-05, 8e-05, 3.0000000000000004e-05, 0.00019, 0.00014000000000000001, 0.00016, 0.0002, 0.00012, 0.0003700000000000003], [0.0, 0.000610000000000001, 0.0011900000000000025, 0.0015600000000000034, 0.001790000000000004, 0.0020800000000000046, 0.0023300000000000052, 0.0028000000000000065, 0.0028800000000000067, 0.0024900000000000057], [0.0, 0.0066199999999998985, 0.01000999999999976, 0.011889999999999684, 0.011519999999999699, 0.010659999999999734, 0.011179999999999713, 0.010139999999999755, 0.010409999999999744, 0.010439999999999743], [0.0, 0.03759000000000084, 0.038660000000001166, 0.033429999999999564, 0.03015999999999894, 0.026589999999999087, 0.0238399999999992, 0.02229999999999926, 0.02009999999999935, 0.018059999999999434], [0.0, 0.11126999999998956, 0.08240000000000075, 0.057960000000007075, 0.04624000000000349, 0.03850000000000112, 0.0319199999999991, 0.02721999999999906, 0.023689999999999205, 0.02064999999999933], [0.0, 0.22951000000008875, 0.1147899999999882, 0.07201000000000478, 0.050710000000004855, 0.03907000000000129, 0.030769999999998916, 0.025229999999999142, 0.021409999999999298, 0.019749999999999365], [0.0, 0.36528000000022454, 0.13070999999998995, 0.07081000000000524, 0.04670000000000363, 0.03242999999999926, 0.024629999999999166, 0.019489999999999376, 0.017099999999999473, 0.015049999999999555], [0.0, 0.48609000000034536, 0.12978999999998903, 0.0606500000000079, 0.03883000000000122, 0.025369999999999136, 0.01843999999999942, 0.01469999999999957, 0.012439999999999661, 0.011369999999999705], [0.0, 0.5922799999999393, 0.11162999999998942, 0.050380000000004754, 0.029089999999998985, 0.02081999999999932, 0.01571999999999953, 0.01172999999999969, 0.009849999999999767, 0.009259999999999791], [0.0, 0.6625499999996195, 0.09630999999999536, 0.042250000000002265, 0.024719999999999163, 0.01598999999999952, 0.011649999999999694, 0.008399999999999826, 0.008259999999999832, 0.007189999999999875], [0.0, 0.7184099999993653, 0.08322000000000043, 0.03528000000000013, 0.01914999999999939, 0.01271999999999965, 0.009739999999999771, 0.0074299999999998655, 0.006929999999999886, 0.00681999999999989], [0.0, 0.7581499999991844, 0.07277000000000448, 0.03138999999999894, 0.018799999999999404, 0.010309999999999748, 0.008759999999999811, 0.006649999999999897, 0.005949999999999926, 0.005429999999999947], [0.0, 0.7770199999990985, 0.06930000000000583, 0.029029999999998987, 0.01622999999999951, 0.009799999999999769, 0.008959999999999803, 0.0065899999999999, 0.005309999999999952, 0.0050999999999999605], [0.0, 0.7969499999990078, 0.06435000000000775, 0.027789999999999038, 0.01541999999999954, 0.008959999999999803, 0.00756999999999986, 0.00609999999999992, 0.0055899999999999405, 0.0048299999999999715], [0.0, 0.8121799999989385, 0.06277000000000836, 0.02552999999999913, 0.014309999999999585, 0.008499999999999822, 0.007619999999999858, 0.005749999999999934, 0.004939999999999967, 0.004179999999999998], [0.0, 0.8276399999988682, 0.0583600000000072, 0.023989999999999193, 0.01420999999999959, 0.007969999999999844, 0.007179999999999876, 0.005279999999999953, 0.004479999999999986, 0.004080000000000002], [0.0, 0.8350599999988344, 0.05821000000000715, 0.024139999999999186, 0.013389999999999623, 0.0074799999999998635, 0.006649999999999897, 0.004659999999999978, 0.003770000000000009, 0.0036500000000000087], [0.0, 0.8480899999987751, 0.05699000000000678, 0.022379999999999258, 0.012119999999999674, 0.006609999999999899, 0.00608999999999992, 0.003740000000000009, 0.003840000000000009, 0.003350000000000008], [0.0, 0.8557599999987402, 0.05595000000000646, 0.02283999999999924, 0.01245999999999966, 0.006729999999999894, 0.005389999999999949, 0.003930000000000008, 0.003440000000000008, 0.0031900000000000075], [0.0, 0.8622299999987107, 0.05465000000000606, 0.021989999999999274, 0.011639999999999694, 0.006189999999999916, 0.005449999999999946, 0.0031200000000000073, 0.0036200000000000086, 0.0028300000000000066], [0.0, 0.869419999998678, 0.05369000000000577, 0.021189999999999307, 0.010569999999999738, 0.0058599999999999295, 0.005029999999999963, 0.0027700000000000064, 0.0035500000000000084, 0.0024200000000000055], [0.0, 0.8761399999986474, 0.053750000000005786, 0.020549999999999333, 0.010839999999999727, 0.005469999999999945, 0.00461999999999998, 0.002190000000000005, 0.0031700000000000074, 0.0020000000000000044], [0.0, 0.8823299999986193, 0.05256000000000542, 0.020039999999999353, 0.009989999999999761, 0.004979999999999965, 0.004489999999999985, 0.0018300000000000041, 0.003310000000000008, 0.001810000000000004], [0.0, 0.8891299999985883, 0.05204000000000526, 0.01910999999999939, 0.00879999999999981, 0.005019999999999964, 0.003840000000000009, 0.0016300000000000036, 0.0028900000000000067, 0.0018500000000000042], [0.0, 0.8938399999985669, 0.050610000000004825, 0.019309999999999383, 0.008479999999999823, 0.004939999999999967, 0.003680000000000009, 0.0016400000000000037, 0.0028500000000000066, 0.001370000000000003], [0.0, 0.9007099999985356, 0.0482400000000041, 0.01789999999999944, 0.008729999999999813, 0.004499999999999985, 0.003030000000000007, 0.0015300000000000034, 0.0023900000000000054, 0.0012400000000000026], [0.0, 0.9032799999985239, 0.04882000000000428, 0.01766999999999945, 0.008369999999999827, 0.00414, 0.002920000000000007, 0.0013400000000000029, 0.0020500000000000045, 0.0011400000000000023], [0.0, 0.9089299999984982, 0.04771000000000394, 0.01693999999999948, 0.007609999999999858, 0.0034700000000000082, 0.002250000000000005, 0.0012300000000000026, 0.0021500000000000048, 0.0009300000000000018], [0.0, 0.9130199999984796, 0.0469400000000037, 0.01594999999999952, 0.007099999999999879, 0.003460000000000008, 0.002260000000000005, 0.0013400000000000029, 0.0015800000000000035, 0.0007400000000000013], [0.0, 0.917769999998458, 0.04491000000000308, 0.015849999999999524, 0.006769999999999892, 0.003390000000000008, 0.0018600000000000042, 0.0012100000000000025, 0.0014800000000000032, 0.0007300000000000013], [0.0, 0.9193699999984507, 0.04438000000000292, 0.015389999999999541, 0.00681999999999989, 0.0031800000000000075, 0.0016600000000000037, 0.0009700000000000019, 0.0015900000000000035, 0.0006000000000000009], [0.0, 0.9231299999984336, 0.04409000000000283, 0.014999999999999557, 0.006109999999999919, 0.0027100000000000062, 0.0012100000000000025, 0.001010000000000002, 0.0012700000000000027, 0.0005400000000000008], [0.0, 0.9263899999984188, 0.04208000000000221, 0.014159999999999591, 0.00632999999999991, 0.002570000000000006, 0.0013200000000000028, 0.001030000000000002, 0.0012500000000000026, 0.0004700000000000006], [0.0, 0.9273199999984145, 0.04244000000000232, 0.014549999999999575, 0.005979999999999925, 0.0023500000000000053, 0.0011300000000000023, 0.0009400000000000018, 0.001020000000000002, 0.0005700000000000008], [0.0, 0.931829999998394, 0.04066000000000178, 0.013289999999999627, 0.005699999999999936, 0.0020400000000000045, 0.0011400000000000023, 0.0007300000000000013, 0.001010000000000002, 0.0005100000000000007], [0.0, 0.9341999999983832, 0.040720000000001796, 0.012689999999999651, 0.0048299999999999715, 0.0020700000000000046, 0.0008700000000000016, 0.0009100000000000017, 0.0006800000000000011, 0.0003200000000000002], [0.0, 0.9360699999983747, 0.03982000000000152, 0.012669999999999652, 0.004839999999999971, 0.001750000000000004, 0.0008100000000000015, 0.0009100000000000017, 0.0007100000000000012, 0.00031000000000000016], [0.0, 0.937759999998367, 0.03924000000000134, 0.012369999999999664, 0.004599999999999981, 0.0017000000000000038, 0.0007500000000000013, 0.0008800000000000017, 0.0006000000000000009, 0.00022], [0.0, 0.9399899999983569, 0.03802000000000097, 0.012399999999999663, 0.004110000000000001, 0.0014600000000000032, 0.0006500000000000011, 0.0008900000000000017, 0.0005400000000000008, 0.00021], [0.0, 0.9418599999983484, 0.03744000000000079, 0.011759999999999689, 0.003990000000000006, 0.0016100000000000036, 0.0006600000000000011, 0.000640000000000001, 0.0005800000000000009, 0.00017], [0.0, 0.9445599999983361, 0.035780000000000284, 0.011319999999999707, 0.00413, 0.0014700000000000032, 0.0005600000000000008, 0.000610000000000001, 0.0005500000000000008, 0.00021], [0.0, 0.9453499999983325, 0.03645000000000049, 0.010619999999999736, 0.0035700000000000085, 0.0013500000000000029, 0.0007000000000000012, 0.0008300000000000015, 0.00038000000000000035, 0.00016], [0.0, 0.9467099999983263, 0.03606000000000037, 0.010599999999999736, 0.0032700000000000077, 0.000980000000000002, 0.0006500000000000011, 0.0008000000000000014, 0.0003600000000000003, 0.00015000000000000001], [0.0, 0.9477999999983213, 0.03540000000000017, 0.010129999999999756, 0.0034800000000000083, 0.0012400000000000026, 0.00046000000000000056, 0.0008000000000000014, 0.00038000000000000035, 5e-05], [0.0, 0.9493799999983141, 0.03478999999999998, 0.010229999999999751, 0.0031800000000000075, 0.0009700000000000019, 0.0004100000000000004, 0.0005300000000000007, 0.00026000000000000003, 7.000000000000001e-05], [0.0, 0.9515899999983041, 0.03318999999999949, 0.009709999999999773, 0.0032700000000000077, 0.0008000000000000014, 0.00045000000000000053, 0.0005000000000000007, 0.00024, 4e-05], [0.0, 0.952929999998298, 0.033109999999999466, 0.00929999999999979, 0.0027800000000000064, 0.000630000000000001, 0.00039000000000000037, 0.0005100000000000007, 0.00019, 9e-05], [0.0, 0.9533099999982962, 0.033329999999999534, 0.008839999999999808, 0.0027300000000000063, 0.0006900000000000012, 0.0004900000000000006, 0.00031000000000000016, 0.00018, 4e-05], [0.0, 0.9543699999982914, 0.03233999999999923, 0.008829999999999808, 0.002610000000000006, 0.0007700000000000014, 0.00042000000000000045, 0.00038000000000000035, 8e-05, 6e-05], [0.0, 0.9554999999982863, 0.03188999999999909, 0.008379999999999827, 0.002580000000000006, 0.0004400000000000005, 0.0005700000000000008, 0.00030000000000000014, 9e-05, 0.00013000000000000002], [0.0, 0.9563799999982823, 0.03128999999999891, 0.008709999999999813, 0.002240000000000005, 0.0005000000000000007, 0.00031000000000000016, 0.00031000000000000016, 0.00013000000000000002, 3.0000000000000004e-05], [0.0, 0.95686999999828, 0.03151999999999898, 0.008409999999999826, 0.0020400000000000045, 0.0003600000000000003, 0.0004300000000000005, 0.00016, 0.00015000000000000001, 1e-05], [0.0, 0.9582599999982737, 0.03066999999999892, 0.007769999999999852, 0.0021500000000000048, 0.00031000000000000016, 0.0004100000000000004, 0.00019, 0.00018, 1e-05], [0.0, 0.9582999999982735, 0.03046999999999893, 0.008109999999999838, 0.0018900000000000043, 0.00038000000000000035, 0.0003700000000000003, 0.00025, 0.00021, 0.0], [0.0, 0.9606999999982626, 0.02948999999999897, 0.007229999999999874, 0.0015900000000000035, 0.0003300000000000002, 0.00039000000000000037, 0.00015000000000000001, 0.0001, 0.0], [0.0, 0.9607399999982624, 0.02923999999999898, 0.007249999999999873, 0.0016100000000000036, 0.0003300000000000002, 0.00045000000000000053, 0.00018, 0.00016, 0.0], [0.0, 0.9608899999982617, 0.02941999999999897, 0.0072599999999998725, 0.0015500000000000034, 0.0002, 0.0004000000000000004, 0.00014000000000000001, 0.00012, 0.0], [0.0, 0.961939999998257, 0.028739999999999, 0.006699999999999895, 0.0016200000000000036, 0.00027000000000000006, 0.0004100000000000004, 0.00013000000000000002, 0.00014000000000000001, 0.0], [0.0, 0.9632899999982508, 0.027919999999999032, 0.0066699999999998965, 0.0015000000000000033, 0.00019, 0.00027000000000000006, 9e-05, 4e-05, 0.0], [0.0, 0.9635299999982497, 0.027919999999999032, 0.006519999999999903, 0.0013200000000000028, 0.00017, 0.0004100000000000004, 8e-05, 0.0, 0.0], [0.0, 0.9641799999982468, 0.027149999999999064, 0.006759999999999893, 0.0011400000000000023, 0.00023, 0.0004100000000000004, 0.00013000000000000002, 0.0, 0.0], [0.0, 0.9643699999982459, 0.02774999999999904, 0.006309999999999911, 0.001000000000000002, 0.00021, 0.0002900000000000001, 4e-05, 0.0, 0.0], [0.0, 0.9647499999982442, 0.02751999999999905, 0.005929999999999927, 0.0010700000000000022, 0.0003200000000000002, 0.0003200000000000002, 4e-05, 0.0, 0.0], [0.0, 0.965019999998243, 0.027039999999999068, 0.00633999999999991, 0.001050000000000002, 0.00023, 0.00027000000000000006, 1e-05, 0.0, 0.0], [0.0, 0.9655099999982407, 0.026849999999999076, 0.0060799999999999205, 0.0010600000000000021, 0.0002900000000000001, 0.00019, 0.0, 0.0, 0.0], [0.0, 0.9671099999982334, 0.025399999999999135, 0.005929999999999927, 0.0009700000000000019, 0.0003200000000000002, 0.00023, 0.0, 0.0, 0.0], [0.0, 0.9665199999982361, 0.026359999999999096, 0.005789999999999932, 0.0008600000000000016, 0.0003200000000000002, 0.00013000000000000002, 0.0, 0.0, 0.0], [0.0, 0.9675199999982316, 0.02599999999999911, 0.005439999999999947, 0.000610000000000001, 0.00023, 0.00014000000000000001, 0.0, 0.0, 0.0], [0.0, 0.9674799999982318, 0.026169999999999104, 0.005299999999999952, 0.0006700000000000011, 0.00026000000000000003, 0.00011, 0.0, 0.0, 0.0], [0.0, 0.9688699999982254, 0.024599999999999168, 0.005429999999999947, 0.0006800000000000011, 0.0003300000000000002, 9e-05, 0.0, 0.0, 0.0], [0.0, 0.9680099999982293, 0.025629999999999126, 0.005339999999999951, 0.0005700000000000008, 0.0003200000000000002, 9e-05, 0.0, 0.0, 0.0], [0.0, 0.9695699999982222, 0.024479999999999173, 0.004919999999999968, 0.000640000000000001, 0.00034000000000000024, 4e-05, 0.0, 0.0, 0.0], [0.0, 0.9694299999982229, 0.02453999999999917, 0.005219999999999956, 0.0004900000000000006, 0.00026000000000000003, 5e-05, 0.0, 0.0, 0.0], [0.0, 0.9705999999982176, 0.023849999999999198, 0.004799999999999973, 0.0004900000000000006, 0.00019, 2e-05, 0.0, 0.0, 0.0], [0.0, 0.9703199999982188, 0.023929999999999195, 0.004959999999999966, 0.0004900000000000006, 0.00027000000000000006, 2e-05, 0.0, 0.0, 0.0], [0.0, 0.9711199999982152, 0.023609999999999208, 0.004659999999999978, 0.00039000000000000037, 0.0002, 0.0, 0.0, 0.0, 0.0], [0.0, 0.970949999998216, 0.023989999999999193, 0.0045099999999999845, 0.00031000000000000016, 0.00021, 0.0, 0.0, 1e-05, 0.0], [0.0, 0.9714399999982137, 0.02332999999999922, 0.004579999999999982, 0.00045000000000000053, 0.0002, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9713599999982141, 0.023619999999999208, 0.004669999999999978, 0.00026000000000000003, 9e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9713399999982142, 0.023749999999999202, 0.00437999999999999, 0.00042000000000000045, 0.00011, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9724399999982092, 0.022919999999999236, 0.004149999999999999, 0.0004000000000000004, 9e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.973799999998203, 0.021409999999999298, 0.004389999999999989, 0.00030000000000000014, 0.0001, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9726399999982083, 0.02279999999999924, 0.004179999999999998, 0.00030000000000000014, 8e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9733099999982052, 0.022439999999999256, 0.003980000000000006, 0.00017, 0.0001, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9741399999982014, 0.021929999999999276, 0.003730000000000009, 0.00015000000000000001, 5e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9744999999981998, 0.021549999999999292, 0.0036200000000000086, 0.00027000000000000006, 6e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9753999999981957, 0.020689999999999327, 0.003730000000000009, 0.00016, 2e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.974229999998201, 0.02186999999999928, 0.003780000000000009, 0.00011, 1e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.975119999998197, 0.02083999999999932, 0.003830000000000009, 0.00018, 3.0000000000000004e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9744699999981999, 0.021489999999999294, 0.003910000000000009, 9e-05, 4e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9757999999981939, 0.020549999999999333, 0.0035300000000000084, 7.000000000000001e-05, 5e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9748199999981983, 0.021049999999999312, 0.004030000000000004, 9e-05, 1e-05, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9756799999981944, 0.020569999999999332, 0.0036400000000000087, 0.00011, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.9757899999981939, 0.020289999999999343, 0.003810000000000009, 0.00011, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016859999999999483, 0.032029999999999136], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006009999999999923, 0.010289999999999749, 0.09369999999999637, 0.057930000000007066, 0.3146300000001739], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00022, 0.0020100000000000044, 0.009059999999999799, 0.017069999999999474, 0.06728000000000661, 0.11339999999998873, 0.1830600000000423, 0.17718000000003642, 0.24979000000010904], [0.0, 0.0, 4e-05, 0.00012, 0.0004000000000000004, 0.0039200000000000085, 0.006379999999999908, 0.02825999999999902, 0.05222000000000532, 0.10958999999999021, 0.15174000000001098, 0.19588000000005512, 0.13152999999999077, 0.20440000000006364, 0.0], [0.0004000000000000004, 0.000640000000000001, 0.0018300000000000041, 0.004899999999999969, 0.01003999999999976, 0.02531999999999914, 0.05056000000000481, 0.09758999999999486, 0.13037999999998962, 0.16373000000002297, 0.1561500000000154, 0.102399999999993, 0.1728700000000321, 0.0, 0.08189000000000095], [0.003010000000000007, 0.006039999999999922, 0.011709999999999691, 0.024959999999999153, 0.04830000000000412, 0.0786700000000022, 0.11677999999998742, 0.13072999999998997, 0.16221000000002145, 0.10674999999999131, 0.09365999999999639, 0.12947999999998872, 0.00707999999999988, 0.0, 0.06289000000000831], [0.010059999999999758, 0.0188799999999994, 0.03389999999999971, 0.05768000000000699, 0.0915399999999972, 0.11001999999999004, 0.12208999999998536, 0.1349599999999942, 0.08335000000000038, 0.07681000000000292, 0.09246999999999685, 0.022229999999999264, 0.0, 0.022769999999999242, 0.030369999999998933], [0.01671999999999949, 0.0322299999999992, 0.05099000000000494, 0.07250000000000459, 0.09110999999999737, 0.10538999999999184, 0.10045999999999375, 0.0783900000000023, 0.0593400000000075, 0.053030000000005566, 0.043690000000002706, 0.0, 0.0, 0.0188799999999994, 0.02653999999999909], [0.018359999999999422, 0.030249999999998937, 0.04965000000000453, 0.06824000000000624, 0.08066000000000143, 0.07021000000000548, 0.06546000000000732, 0.052470000000005394, 0.0391000000000013, 0.03698000000000065, 0.007929999999999845, 0.0, 0.0, 0.04084000000000183, 0.0], [0.015849999999999524, 0.028719999999999, 0.039670000000001475, 0.04984000000000459, 0.051820000000005195, 0.05328000000000564, 0.04250000000000234, 0.03474999999999997, 0.02505999999999915, 0.018259999999999426, 0.0017200000000000039, 0.0, 0.0, 0.03528000000000013, 0.0], [0.012299999999999667, 0.019709999999999367, 0.027809999999999037, 0.03773000000000088, 0.037480000000000804, 0.035560000000000216, 0.027079999999999067, 0.01912999999999939, 0.019589999999999372, 0.010369999999999746, 0.0, 0.0, 0.01197999999999968, 0.019059999999999393, 0.0], [0.009239999999999792, 0.01467999999999957, 0.02111999999999931, 0.02848999999999901, 0.024839999999999158, 0.024589999999999168, 0.013879999999999603, 0.01671999999999949, 0.01572999999999953, 0.004549999999999983, 0.0, 0.0, 0.010409999999999744, 0.018069999999999434, 0.0], [0.007449999999999865, 0.010799999999999728, 0.015639999999999533, 0.01843999999999942, 0.01868999999999941, 0.014999999999999557, 0.011089999999999716, 0.014579999999999574, 0.009089999999999798, 0.003800000000000009, 0.0, 0.0, 0.008729999999999813, 0.01592999999999952, 0.0], [0.006119999999999919, 0.008589999999999818, 0.013019999999999638, 0.01466999999999957, 0.012539999999999657, 0.012109999999999675, 0.009479999999999782, 0.012669999999999652, 0.009499999999999781, 0.0011300000000000023, 0.0, 0.0, 0.007909999999999846, 0.01493999999999956, 0.0], [0.005189999999999957, 0.006979999999999884, 0.01025999999999975, 0.011949999999999681, 0.009359999999999787, 0.01076999999999973, 0.007299999999999871, 0.010569999999999738, 0.006519999999999903, 0.0011000000000000022, 0.0, 0.0, 0.007039999999999881, 0.013259999999999628, 0.0], [0.004479999999999986, 0.0058599999999999295, 0.008439999999999824, 0.00928999999999979, 0.007279999999999872, 0.009009999999999801, 0.00804999999999984, 0.008089999999999839, 0.0031400000000000074, 0.001030000000000002, 0.0, 0.005709999999999936, 0.011409999999999703, 0.0, 0.0], [0.004110000000000001, 0.0050999999999999605, 0.007439999999999865, 0.009079999999999798, 0.006539999999999902, 0.006649999999999897, 0.007859999999999848, 0.006389999999999908, 0.0025100000000000057, 0.0008700000000000016, 0.0, 0.004919999999999968, 0.011189999999999712, 0.0, 0.0], [0.0032800000000000077, 0.00462999999999998, 0.006219999999999915, 0.007849999999999848, 0.006209999999999915, 0.004759999999999974, 0.00706999999999988, 0.005129999999999959, 0.0018300000000000041, 0.0008400000000000016, 0.0, 0.004439999999999987, 0.010179999999999753, 0.0, 0.0], [0.002180000000000005, 0.0043399999999999914, 0.005669999999999937, 0.0074799999999998635, 0.004579999999999982, 0.003710000000000009, 0.00632999999999991, 0.004929999999999967, 0.0013400000000000029, 0.0009300000000000018, 0.0, 0.003750000000000009, 0.008979999999999802, 0.0, 0.0], [0.0020300000000000045, 0.003760000000000009, 0.005199999999999956, 0.006929999999999886, 0.0035800000000000085, 0.0029100000000000068, 0.005779999999999933, 0.0041899999999999975, 0.0017100000000000038, 0.0, 0.0, 0.0031400000000000074, 0.007579999999999859, 0.0, 0.0], [0.0020000000000000044, 0.003360000000000008, 0.0050999999999999605, 0.005709999999999936, 0.0028000000000000065, 0.003390000000000008, 0.00584999999999993, 0.0031400000000000074, 0.0012900000000000027, 0.0, 0.002700000000000006, 0.0, 0.007649999999999857, 0.0, 0.0], [0.0018400000000000042, 0.003010000000000007, 0.003830000000000009, 0.004299999999999993, 0.002610000000000006, 0.0032700000000000077, 0.004969999999999966, 0.0027100000000000062, 0.001010000000000002, 0.0, 0.002260000000000005, 0.0, 0.006979999999999884, 0.0, 0.0], [0.0018500000000000042, 0.0023300000000000052, 0.0031400000000000074, 0.0035800000000000085, 0.0020900000000000046, 0.002950000000000007, 0.0038500000000000092, 0.002200000000000005, 0.0005600000000000008, 0.0, 0.002240000000000005, 0.005519999999999943, 0.0, 0.0, 0.0], [0.0014600000000000032, 0.0021500000000000048, 0.002960000000000007, 0.003030000000000007, 0.001740000000000004, 0.004229999999999996, 0.0034900000000000083, 0.0016800000000000038, 0.00046000000000000056, 0.0, 0.0016900000000000038, 0.005389999999999949, 0.0, 0.0, 0.0], [0.001380000000000003, 0.0020100000000000044, 0.0025000000000000057, 0.0020500000000000045, 0.0018600000000000042, 0.003960000000000007, 0.003400000000000008, 0.0012500000000000026, 0.0005400000000000008, 0.001410000000000003, 0.0, 0.005139999999999959, 0.0, 0.0, 0.0], [0.0010800000000000022, 0.0020500000000000045, 0.002280000000000005, 0.0012800000000000027, 0.0015200000000000033, 0.0036500000000000087, 0.002550000000000006, 0.001050000000000002, 0.0004000000000000004, 0.0013100000000000028, 0.0, 0.004100000000000001, 0.0, 0.0, 0.0], [0.0010600000000000021, 0.0017000000000000038, 0.001770000000000004, 0.0011600000000000024, 0.0016700000000000037, 0.0036200000000000086, 0.0018500000000000042, 0.001430000000000003, 0.0, 0.0009600000000000019, 0.0, 0.003440000000000008, 0.0, 0.0, 0.0], [0.0011100000000000023, 0.0012300000000000026, 0.001370000000000003, 0.001000000000000002, 0.0014700000000000032, 0.0032200000000000076, 0.0011500000000000024, 0.0011600000000000024, 0.0007500000000000013, 0.0, 0.0032300000000000076, 0.0, 0.0, 0.0, 0.0], [0.0009300000000000018, 0.0011900000000000025, 0.0009400000000000018, 0.0009100000000000017, 0.001400000000000003, 0.0028300000000000066, 0.001020000000000002, 0.0004800000000000006, 0.0008200000000000015, 0.0, 0.0027600000000000064, 0.0, 0.0, 0.0, 0.0], [0.0008600000000000016, 0.001040000000000002, 0.0004700000000000006, 0.001040000000000002, 0.0017200000000000039, 0.002310000000000005, 0.001000000000000002, 0.00046000000000000056, 0.0004300000000000005, 0.0, 0.0024000000000000054, 0.0, 0.0, 0.0, 0.0], [0.0007900000000000014, 0.0007300000000000013, 0.0005800000000000009, 0.0009400000000000018, 0.0018400000000000042, 0.0017300000000000039, 0.0007400000000000013, 0.0003200000000000002, 0.00046000000000000056, 0.0, 0.0021400000000000047, 0.0, 0.0, 0.0, 0.0], [0.0005400000000000008, 0.0004300000000000005, 0.0006600000000000011, 0.0007800000000000014, 0.0016300000000000036, 0.0016800000000000038, 0.0006500000000000011, 0.0005700000000000008, 0.0, 0.0, 0.0018400000000000042, 0.0, 0.0, 0.0, 0.0], [0.0005800000000000009, 0.0003700000000000003, 0.000640000000000001, 0.0006800000000000011, 0.0014500000000000032, 0.0015400000000000034, 0.0005200000000000007, 0.00024, 0.0, 0.0007700000000000014, 0.0008200000000000015, 0.0, 0.0, 0.0, 0.0], [0.0002900000000000001, 0.00035000000000000027, 0.000620000000000001, 0.0005900000000000009, 0.0012800000000000027, 0.0009500000000000018, 0.0003700000000000003, 0.00023, 0.0, 0.0013500000000000029, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0003300000000000002, 0.00035000000000000027, 0.0004900000000000006, 0.001020000000000002, 0.0012100000000000025, 0.0008700000000000016, 0.00046000000000000056, 0.0, 0.0, 0.0013100000000000028, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0003200000000000002, 0.00039000000000000037, 0.00031000000000000016, 0.000980000000000002, 0.000980000000000002, 0.0007100000000000012, 0.0003300000000000002, 0.0, 0.0, 0.0009100000000000017, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00027000000000000006, 0.00030000000000000014, 0.0005300000000000007, 0.0008700000000000016, 0.0009400000000000018, 0.0004800000000000006, 0.00011, 0.0, 0.0004000000000000004, 0.0005000000000000007, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00013000000000000002, 0.00022, 0.0005600000000000008, 0.0007500000000000013, 0.000990000000000002, 0.00025, 0.0, 0.0, 0.0008000000000000014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00012, 0.00025, 0.0004800000000000006, 0.000630000000000001, 0.0009500000000000018, 0.00012, 0.0, 0.0, 0.0005400000000000008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [7.000000000000001e-05, 0.00027000000000000006, 0.0004900000000000006, 0.0005600000000000008, 0.0006700000000000011, 4e-05, 0.0, 0.0, 0.000610000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [9e-05, 0.00026000000000000003, 0.0003700000000000003, 0.000620000000000001, 0.00039000000000000037, 0.0, 0.0, 0.00017, 0.00021, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2e-05, 0.0005000000000000007, 0.0003200000000000002, 0.0005000000000000007, 0.00017, 0.0, 0.0, 0.0003700000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00013000000000000002, 0.0004700000000000006, 0.00027000000000000006, 0.0004400000000000005, 5e-05, 0.0, 0.0, 0.0003700000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00019, 0.0003200000000000002, 0.00018, 0.00030000000000000014, 4e-05, 0.0, 0.0, 0.00026000000000000003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00014000000000000001, 0.00018, 0.00015000000000000001, 0.00014000000000000001, 0.0, 0.0, 8e-05, 0.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.00019, 9e-05, 0.00012, 3.0000000000000004e-05, 0.0, 0.0, 0.00016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [9e-05, 7.000000000000001e-05, 0.00012, 0.0, 0.0, 0.0, 0.00014000000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [7.000000000000001e-05, 8e-05, 0.0, 0.0, 0.0, 0.0, 0.00011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4e-05, 2e-05, 0.0, 0.0, 0.0, 0.0001, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [9e-05, 0.0, 0.0, 0.0, 0.0, 0.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 7.000000000000001e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1e-05, 0.0, 0.0, 0.0, 0.0, 7.000000000000001e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [4e-05, 0.0, 0.0, 0.0, 0.0, 0.0001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 4e-05, 6e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 3.0000000000000004e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 3.0000000000000004e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 6e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 4e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 5e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])

def plasmodium():
    return (5, 15, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1e-05, 2e-05, 8e-05, 0.00014000000000000001, 0.00013000000000000002, 0.0002, 0.00015000000000000001, 0.00014000000000000001, 0.00027000000000000006], [0.0, 0.0005200000000000007, 0.0012700000000000027, 0.0016400000000000037, 0.0019100000000000044, 0.002540000000000006, 0.002290000000000005, 0.002550000000000006, 0.003020000000000007, 0.0027400000000000063], [0.0, 0.006689999999999896, 0.009689999999999773, 0.011289999999999708, 0.011339999999999706, 0.01073999999999973, 0.011409999999999703, 0.009989999999999761, 0.010789999999999729, 0.010569999999999738], [0.0, 0.036760000000000584, 0.037160000000000706, 0.03272999999999935, 0.029649999999998962, 0.0262199999999991, 0.023219999999999224, 0.02310999999999923, 0.020289999999999343, 0.017289999999999466], [0.0, 0.11315999999998883, 0.0794200000000019, 0.05997000000000769, 0.046170000000003465, 0.03851000000000112, 0.03266999999999933, 0.026569999999999087, 0.022929999999999236, 0.02057999999999933], [0.0, 0.22821000000008745, 0.11642999999998756, 0.0732500000000043, 0.05137000000000506, 0.038300000000001055, 0.029399999999998972, 0.02408999999999919, 0.02208999999999927, 0.020029999999999354], [0.0, 0.36291000000022217, 0.13222999999999147, 0.07090000000000521, 0.04732000000000382, 0.03285999999999939, 0.025359999999999137, 0.019269999999999385, 0.016859999999999483, 0.01419999999999959], [0.0, 0.48900000000034827, 0.12680999999998604, 0.06212000000000835, 0.0384500000000011, 0.02499999999999915, 0.01861999999999941, 0.015039999999999555, 0.01270999999999965, 0.011809999999999687], [0.0, 0.5871299999999627, 0.11395999999998851, 0.049400000000004454, 0.029379999999998973, 0.02037999999999934, 0.01568999999999953, 0.011629999999999694, 0.010479999999999741, 0.008969999999999803]], [[0.0, 0.0, 9e-05, 0.00017, 0.0005000000000000007, 0.003940000000000008, 0.0058599999999999295, 0.027849999999999035, 0.05356000000000573, 0.10828999999999071, 0.15240000000001164, 0.194750000000054, 0.13320999999999245, 0.20233000000006157, 0.0], [0.0004700000000000006, 0.0007300000000000013, 0.0019400000000000044, 0.0047799999999999735, 0.008979999999999802, 0.025079999999999148, 0.05093000000000492, 0.09843999999999453, 0.12784999999998709, 0.16223000000002147, 0.16078000000002002, 0.102389999999993, 0.17122000000003046, 0.0, 0.0830400000000005], [0.002950000000000007, 0.005959999999999925, 0.011779999999999688, 0.024859999999999157, 0.047440000000003854, 0.07820000000000238, 0.11575999999998782, 0.13062999999998987, 0.16330000000002254, 0.10734999999999108, 0.09347999999999645, 0.12822999999998747, 0.007629999999999857, 0.0, 0.0639500000000079], [0.009849999999999767, 0.019099999999999392, 0.03409999999999977, 0.05715000000000683, 0.09045999999999763, 0.11035999999998991, 0.12309999999998497, 0.1354699999999947, 0.08366000000000026, 0.07802000000000245, 0.0915699999999972, 0.02204999999999927, 0.0, 0.022239999999999264, 0.030359999999998933], [0.017509999999999457, 0.031119999999998902, 0.050610000000004825, 0.07372000000000412, 0.09384999999999631, 0.10540999999999183, 0.10223999999999306, 0.07941000000000191, 0.05994000000000768, 0.05287000000000552, 0.042810000000002436, 0.0, 0.0, 0.018299999999999424, 0.02577999999999912], [0.018349999999999422, 0.030499999999998927, 0.047740000000003946, 0.06907000000000592, 0.08108000000000126, 0.07105000000000515, 0.06650000000000691, 0.0521600000000053, 0.03940000000000139, 0.03770000000000087, 0.007339999999999869, 0.0, 0.0, 0.03913000000000131, 0.0], [0.015319999999999544, 0.028109999999999025, 0.040910000000001855, 0.0505300000000048, 0.04974000000000456, 0.053420000000005685, 0.0426900000000024, 0.0358300000000003, 0.02456999999999917, 0.01862999999999941, 0.0020700000000000046, 0.0, 0.0, 0.03501000000000005, 0.0], [0.011869999999999685, 0.019699999999999367, 0.027109999999999065, 0.037710000000000875, 0.03799000000000096, 0.03535000000000015, 0.027049999999999068, 0.01917999999999939, 0.02038999999999934, 0.009949999999999763, 0.0, 0.0, 0.012449999999999661, 0.019339999999999382, 0.0], [0.008819999999999809, 0.01417999999999959, 0.02162999999999929, 0.028399999999999013, 0.025179999999999144, 0.02278999999999924, 0.01368999999999961, 0.01744999999999946, 0.015829999999999525, 0.004659999999999978, 0.0, 0.0, 0.01025999999999975, 0.017549999999999455, 0.0], [0.007189999999999875, 0.011129999999999715, 0.016369999999999503, 0.019569999999999373, 0.01787999999999944, 0.016009999999999518, 0.011799999999999687, 0.014569999999999575, 0.009349999999999787, 0.004309999999999993, 0.0, 0.0, 0.009079999999999798, 0.01571999999999953, 0.0]])

def mouse():
    return (10, 20, [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1e-05, 2e-05, 8e-05, 0.0001, 9e-05], [0.0, 0.00014000000000000001, 0.0005700000000000008, 0.0011400000000000023, 0.001740000000000004, 0.0020800000000000046, 0.0023500000000000053, 0.002680000000000006, 0.0028300000000000066, 0.0034700000000000082], [0.0, 0.005679999999999937, 0.010199999999999753, 0.011809999999999687, 0.011569999999999697, 0.010589999999999737, 0.009489999999999782, 0.008219999999999833, 0.00805999999999984, 0.0069399999999998855], [0.0, 0.03684000000000061, 0.03775000000000089, 0.034870000000000005, 0.03656000000000052, 0.039380000000001386, 0.03903000000000128, 0.04082000000000183, 0.04043000000000171, 0.037510000000000814], [0.0, 0.14399000000000323, 0.12927999999998852, 0.10855999999999061, 0.08520999999999966, 0.06479000000000758, 0.04749000000000387, 0.03475999999999997, 0.0262899999999991, 0.020019999999999354], [0.0, 0.3639300000002232, 0.18173000000004097, 0.08733999999999884, 0.045060000000003125, 0.02650999999999909, 0.016339999999999504, 0.011209999999999712, 0.008759999999999811, 0.0069399999999998855], [0.0, 0.5598400000000869, 0.12559999999998483, 0.04004000000000159, 0.018019999999999436, 0.011379999999999705, 0.007729999999999853, 0.0058599999999999295, 0.004699999999999977, 0.004589999999999981], [0.0, 0.6637099999996142, 0.07241000000000462, 0.020769999999999324, 0.011309999999999707, 0.007689999999999855, 0.006139999999999918, 0.004679999999999978, 0.0038900000000000093, 0.003750000000000009]], [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0016800000000000038, 0.005969999999999925, 0.03090999999999891, 0.029099999999998984, 0.056200000000006536, 0.30879000000016804, 0.321730000000181, 0.13484999999999409], [0.0, 0.0, 0.0, 0.0, 8e-05, 0.0024600000000000056, 0.007789999999999851, 0.030999999999998907, 0.030259999999998937, 0.05942000000000752, 0.2729600000001322, 0.3130700000001723, 0.12889999999998814, 0.056030000000006484, 0.04658000000000359], [0.00017, 0.0005100000000000007, 0.0016000000000000035, 0.003360000000000008, 0.012089999999999676, 0.028119999999999024, 0.028539999999999007, 0.06389000000000793, 0.2426600000001019, 0.29281000000015206, 0.1420500000000013, 0.05713000000000682, 0.031959999999999114, 0.025929999999999113, 0.03295999999999942], [0.0032700000000000077, 0.006909999999999887, 0.014019999999999597, 0.02089999999999932, 0.02475999999999916, 0.07239000000000463, 0.2164700000000757, 0.25361000000011286, 0.14734000000000658, 0.06716000000000666, 0.03502000000000005, 0.022929999999999236, 0.019739999999999366, 0.02081999999999932, 0.02824999999999902], [0.007339999999999869, 0.01571999999999953, 0.035590000000000226, 0.09277999999999673, 0.18262000000004186, 0.1959700000000552, 0.12065999999998592, 0.07070000000000529, 0.045810000000003355, 0.02648999999999909, 0.019309999999999383, 0.016809999999999485, 0.015099999999999553, 0.02037999999999934, 0.026209999999999102], [0.03495000000000003, 0.060700000000007914, 0.09236999999999689, 0.10280999999999284, 0.08256000000000069, 0.05323000000000563, 0.03900000000000127, 0.03561000000000023, 0.026659999999999084, 0.01864999999999941, 0.01591999999999952, 0.014149999999999592, 0.01418999999999959, 0.019549999999999373, 0.023719999999999204], [0.01621999999999951, 0.023899999999999196, 0.029269999999998977, 0.03093999999999891, 0.02800999999999903, 0.023369999999999218, 0.025209999999999143, 0.028069999999999026, 0.020309999999999342, 0.015079999999999554, 0.01417999999999959, 0.012869999999999644, 0.013139999999999633, 0.018829999999999403, 0.02087999999999932], [0.005979999999999925, 0.00953999999999978, 0.01297999999999964, 0.015109999999999553, 0.01721999999999947, 0.018549999999999414, 0.022179999999999266, 0.024729999999999162, 0.018459999999999418, 0.013829999999999605, 0.01322999999999963, 0.012419999999999662, 0.012839999999999645, 0.018699999999999408, 0.019439999999999378], [0.0035900000000000085, 0.006309999999999911, 0.009489999999999782, 0.011899999999999683, 0.014379999999999582, 0.014379999999999582, 0.0213799999999993, 0.023999999999999192, 0.016369999999999503, 0.012759999999999648, 0.012509999999999659, 0.011119999999999715, 0.012169999999999672, 0.019059999999999393, 0.018359999999999422], [0.002970000000000007, 0.005069999999999962, 0.007979999999999843, 0.011299999999999708, 0.013079999999999635, 0.014999999999999557, 0.020049999999999353, 0.022499999999999253, 0.01420999999999959, 0.011679999999999692, 0.012049999999999677, 0.010869999999999725, 0.012079999999999676, 0.017819999999999444, 0.016129999999999513]])


def ambiguity_per_length():
    high = 99
    low = 1
    min_len, max_len, data1_, data2_ = mouse()

    data1 = []
    for row in data1_:
        data1.append( [] )
        for ele in row[1:]:
            data1[-1].append(ele * (high-low) + low)
    data2 = []
    for row in data2_:
        data2.append( [] )
        for ele in row:
            data2[-1].append(ele * (high-low) + low)

    r1max = 10
    r2size = 15

    color_mapper = LogColorMapper(
                    palette=heatmap_palette(light_spec_approximation, 256),
                    low=low,
                    high=high
                )

    plot = figure(title="ambiguity on human genome",
            x_range=(1,r1max), y_range=(min_len, max_len),
            x_axis_label='ambiguity', y_axis_label='sequence length',
            plot_width=resolution, plot_height=resolution,
            min_border_bottom=10, min_border_top=10,
            min_border_left=10, min_border_right=15,
            x_axis_type=None, y_axis_type=None
        )
    for index, row in enumerate(data1):
        plot.image(image=[[row]], color_mapper=color_mapper,
                dh=[.6], dw=[r1max-1], x=[1], y=[min_len + index + 0.2])

    plot2 = figure(x_range=(r1max,2**r2size+r1max), y_range=(min_len, max_len),
            min_border_bottom=10, min_border_top=10,
            min_border_left=20, min_border_right=15,
            plot_width=resolution*3/4, plot_height=resolution,tools=[],
            x_axis_type="log"
        )
    for index, row in enumerate(data2):
        plot2.image(image=[[row]], color_mapper=color_mapper,
            dh=[.6], dw=[2**r2size+r1max], x=[r1max], y=[min_len + index + 0.2])

    ticks = []
    num_ticks = 6
    for tick in range(num_ticks):
        ticks.append( math.exp( (tick/float(num_ticks-1)) * math.log(high)) )#(*(high-low)) / float(math.exp(num_ticks)) + low )

    print(ticks)

    size = "12pt"
    #color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0), ticker=FixedTicker(ticks=ticks))
    color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0))
    color_bar.major_label_text_font=font
    color_bar.major_label_text_font_size=size
    #color_bar.label_standoff = 20

    ticker = SingleIntervalTicker(interval=1, num_minor_ticks=0)
    plot.add_layout(LinearAxis(ticker=ticker), 'left')
    plot.add_layout(LinearAxis(ticker=ticker), 'below')
    plot.add_layout(color_bar, 'left')
    plot.legend.label_text_font=font
    plot.background_fill_color = dark_greys[2]
    plot.background_fill_alpha = 1
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.axis.major_label_text_font_size=size
    plot.xaxis.major_label_standoff = 15
    plot.xaxis.minor_tick_line_color = None
    plot.yaxis.minor_tick_line_color = None
    plot.grid.grid_line_color = None

    plot2.legend.label_text_font=font
    plot2.yaxis.visible = False
    plot2.background_fill_color = dark_greys[2]
    plot2.background_fill_alpha = 1
    plot2.axis.axis_label_text_font=font
    plot2.axis.major_label_text_font_size=size
    plot2.axis.major_label_text_font=font
    plot2.xaxis.major_label_standoff = 15
    plot2.grid.grid_line_color = None

    save([[plot, plot2]], "ambiguityPerQueryLen", True)

def theoretical_max_acc():

    def binomial_no_success(n, p):
        return (1-p)**n

    """
    def prob_x_exists(x_len, ref_len):
        p = 0.25**x_len # (1/4)^x_len
        n = ref_len - x_len
        return 1-binomial_no_success(n,p)
    """

    def prob_non_enclosed(x_len, ref_len):
        expected_num_matches = (0.25**x_len) * (ref_len - x_len)
        prob_extendable = 1.0 - 3.0/4.0 ** 2
        return binomial_no_success(expected_num_matches, prob_extendable)

    def prob_all_non_enclosed(li, ref_len):
        ret = 1.0
        # compute weather all are enclosed
        for x in li:
            ret *= 1-prob_non_enclosed(x, ref_len)
        # return opposite
        return 1-ret

    def exp_match_amount(x_len, ref_len):
        p = 0.25**x_len
        n = ref_len - x_len
        return n*p

    ref_len = 3000000000 # three billion => human genome length
    q_len = 1000
    indel_size = 100
    prob_refindable = []
    quality = 20
    depth = 16
    max_missmatches = 0
    check_for_min_size_instead = None

    print("creating query length matrix...")
    max_indels = int(q_len/indel_size)*2
    for num_mut in range(0, q_len, max(10,int(q_len/quality))):
        prob_refindable.append( [] )
        for num_indel in range(0,max_indels, max(2,int(max_indels/quality))):
            q_len_e = simulate_max_length(q_len, num_mut, num_indel, indel_size, depth, max_missmatches)
            if q_len_e is None:
                prob_refindable[-1].append(float('NaN'))
            else:
                probs = []
                for x in q_len_e:
                    if check_for_min_size_instead is None:
                        probs.append(prob_all_non_enclosed(x, ref_len))
                    else:
                        p = 0
                        for e in x:
                            if e >= check_for_min_size_instead:
                                p = 1
                        probs.append(p)
                prob_refindable[-1].append(avg(probs))
            #prob_refindable[-1].append(q_len_e)
        if num_mut % 100 == 0:
            print(num_mut, "/", q_len)
    print("done")

    w = q_len
    h = max_indels

    color_mapper = LinearColorMapper(
                        palette=heatmap_palette(light_spec_approximation, 127),
                        low=0,
                        high=1
                    )

    tick_formater = FuncTickFormatter(code="""
        return Math.max(Math.floor( (tick+1)/2),0) + '; ' +
                Math.max(Math.floor( (tick)/2),0)"""
        )
    #tick_formater = FuncTickFormatter(code="return 'a')

    plot = figure(title="theoretical max accuracy",
            x_range=(0,h), y_range=(0,w),
            x_axis_label='num ' + str(indel_size) + ' nt insertions; num ' + str(indel_size) + ' nt deletions', y_axis_label='num mutations'
        )
    plot.xaxis.formatter = tick_formater
    plot.image(image=[prob_refindable], color_mapper=color_mapper,
            dh=[w], dw=[h], x=[0], y=[0])

    color_bar = ColorBar(color_mapper=color_mapper, border_line_color=None, location=(0,0))

    plot.add_layout(color_bar, 'left')

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.legend.label_text_baseline="bottom"
    save(plot, "upperBound")


#static stuff
I = "I"
M = "M"
MM = "\=M"
D = "D"
query =     [                         "T", "A", "C", "A", "T", "T", "C", "T" ]
reference = ["T", "T", "C", "A", "G",           "C", "A", "T", "A", "C", "T", "C", "A"]
l_alignment = [D,D,I,I,M,M,D,D,D,M,MM,M,M,D]

def seed_shadows():
    min_x = -1.0
    min_y = -1.0
    max_x = 13
    max_y = 8
    plot = figure(
                title="Figure X: Shadows",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    # x y size draw_shadow?
    seeds = [
        (1.5,1.5,2, orange),
        (5.5,2.5,2, green),
        (-.5,3.5,3, blue)
    ]

    for x, y, size, color in seeds:
        patch_x = []
        patch_y = []

        patch_x.append(min_x)
        patch_y.append(y)
        patch_x.append(x)
        patch_y.append(y)
        patch_x.append(x + size)
        patch_y.append(y + size)
        patch_x.append(x + size)
        patch_y.append(max_y)
        patch_x.append(min_x)
        patch_y.append(max_y)
        patch_x.append(float('nan'))
        patch_y.append(float('nan'))
        patch_x.append(x)
        patch_y.append(min_y)
        patch_x.append(x)
        patch_y.append(y)
        patch_x.append(x + size)
        patch_y.append(y + size)
        patch_x.append(max_x)
        patch_y.append(y + size)
        patch_x.append(max_x)
        patch_y.append(min_y)
        patch_x.append(float('nan'))
        patch_y.append(float('nan'))

        plot.patch(
                patch_x,
                patch_y,
                fill_color=color,
                fill_alpha=.3,
                line_color=None,
                #line_width=2,
                #line_dash=[2,2],
            )

    for x, y, size, color in seeds:
        seeds_x = []
        seeds_y = []
        seeds_x.append(x)
        seeds_x.append(x + size)
        seeds_x.append(float('nan'))
        seeds_y.append(y)
        seeds_y.append(y + size)
        seeds_y.append(float('nan'))

        plot.line(
                seeds_x,
                seeds_y,
                color=color,
                line_width=5
            )
    """
    plot.patch(
            [seeds[-2][0]+seeds[-2][2], max_x, max_x, seeds[-2][0], seeds[-2][0]],
            [seeds[-2][1]+seeds[-2][2], seeds[-2][1]+seeds[-2][2], min_y, min_y, seeds[-2][1]],
            fill_color=dark_greys[2],
            fill_alpha=.5,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    """

    plot.line(
            [min_x, seeds[0][0], seeds[0][0]+1, seeds[1][0], seeds[1][0]+5.5],
            [min_y, seeds[0][1], seeds[0][1]+1, seeds[1][1], max_y],
            color="black",
            line_dash=[2,2],
            line_width=2
        )


    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "shadows")

def alignment():
    plot = figure(
                title="Figure 1",
                plot_width=resolution, plot_height=resolution,
                x_axis_label = "reference", y_axis_label = "query"
            )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None

    cur_x = -.5
    cur_y = -.5
    m_x = []
    m_y = []
    mm_x = []
    mm_y = []
    i_x = []
    i_y = []
    d_x = []
    d_y = []

    c_alignment = []
    for symbol in l_alignment:
        if len(c_alignment) > 0 and c_alignment[-1][0] == symbol:
            c_alignment[-1] = (symbol, c_alignment[-1][1]+1)
        else:
            c_alignment.append( (symbol,1) )

    for symbol, amount in c_alignment:
        if symbol == I:
            i_x.append([cur_x, cur_x])
            i_y.append([cur_y, cur_y+amount])
            cur_y += amount
        elif symbol == D:
            d_x.append([cur_x, cur_x+amount])
            d_y.append([cur_y, cur_y])
            cur_x += amount
        elif symbol == M:
            m_x.append([cur_x, cur_x+amount])
            m_y.append([cur_y, cur_y+amount])
            cur_x += amount
            cur_y += amount
        elif symbol == MM:
            mm_x.append([cur_x, cur_x+amount])
            mm_y.append([cur_y, cur_y+amount])
            cur_x += amount
            cur_y += amount

    plot.multi_line(
            m_x,
            m_y,
            legend="ma",
            color=green,
            line_width=5
        )

    plot.multi_line(
            mm_x,
            mm_y,
            legend="mm",
            color=orange,
            line_width=5
        )

    plot.multi_line(
            i_x,
            i_y,
            legend="ins_____",
            color=blue,
            line_width=5
        )

    plot.multi_line(
            d_x,
            d_y,
            legend="del",
            color=purple,
            line_width=5
        )

    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = None
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)


    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="bottom"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "alignment")

def stripOfConsideration():
    plot = figure(
                title="Figure X: Strip of consideration",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.patch(
            [-.5,7.5,12.5,12.5,5.5],
            [-.5,7.5,7.5,6.5,-.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )


    plot.line(
        [-.5,7.5],
        [-.5,7.5],
        color=green,
        line_width=1,
        line_dash=[2,2]
    )

    plot.line(
        [5.5,12.5],
        [-.5,6.5],
        color=green,
        line_width=1,
        line_dash=[2,2]
    )

    plot.line(
        [4.5,7.5],
        [1.5,4.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [2.5,4.5],
        [-.5,1.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )


    plot.line(
        [10.5,11.5],
        [1.5,2.5],
        color=orange,
        line_width=3
    )
    plot.line(
        [8.5,10.5],
        [-.5,1.5],
        color=orange,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [1.5,2.5],
        [1.5,2.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [-.5,1.5],
        [-.5,1.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [-.5,2.5],
        [3.5,6.5],
        color=orange,
        line_width=3
    )
    plot.line(
        [-1.0,-.5],
        [3.0,3.5],
        color=orange,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.line(
        [0.5,1.5],
        [-.5,0.5],
        color=blue,
        line_width=3
    )

    plot.line(
        [9.5,11.5],
        [4.5,6.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [4.5,9.5],
        [-.5,4.5],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "stripOfConsideration")


def forced_gap():
    plot = figure(
                #title="Figure X: Forced Gaps",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.line(
        [-1,9],
        [-1,9],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )
    plot.line(
        [1.5,3.5],
        [1.5,3.5],
        color=blue,
        line_width=3
    )

    plot.line(
        [2,12],
        [-1,9],
        color=blue,
        line_alpha=.3,
        line_width=1,
        line_dash=[8,2]
    )
    plot.line(
        [8.5,10.5],
        [5.5,7.5],
        color=blue,
        line_width=3
    )

    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "forcedGap")


def optimal_matching():
    min_x = -1.0
    min_y = -1.0
    max_x = 13
    max_y = 8
    plot = figure(
                title="Figure X: Optimal matching",
                plot_width=resolution, plot_height=resolution,
                x_range=[-1,13], y_range=[-1,8]
            )
    plot.patch(
            [1.5,1.5,4.5,4.5],
            [.5,1.5,1.5,0.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    plot.patch(
            [10.5,10.5,max_x,max_x],
            [5.5,max_y,max_y,5.5],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )
    plot.patch(
            [min_x,min_x,0.5,0.5],
            [min_y,-.5,-.5,min_y],
            fill_color=green,
            fill_alpha=.3,
            line_color=None,
            #line_width=2,
            #line_dash=[2,2],
        )

    plot.line(
        [0.5,1.5],
        [-.5,0.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [4.5,7.5],
        [1.5,4.5],
        color=blue,
        line_width=3
    )
    plot.line(
        [9.5,10.5],
        [4.5,5.5],
        color=blue,
        line_width=3
    )


    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.ticker = FixedTicker(ticks=range(len(reference)))
    plot.legend.location = "top_left"
    plot.toolbar.logo = None
    plot.toolbar_location = None
    grid = []
    for p in range(-1,len(reference)):
        grid.append(p+.5)
    plot.xgrid.ticker = FixedTicker(ticks=grid)
    plot.xgrid.band_fill_color = greys[3]
    plot.xgrid.band_fill_alpha = 0.2
    plot.xgrid.grid_line_color = greys[0]
    plot.xaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % reference)
    plot.yaxis.ticker = FixedTicker(ticks=range(len(query)))
    grid = []
    for p in range(-1,len(query)):
        grid.append(p+.5)
    plot.ygrid.ticker = FixedTicker(ticks=grid)
    plot.ygrid.band_fill_color = greys[3]
    plot.ygrid.band_fill_alpha = 0.2
    plot.ygrid.grid_line_color = greys[0]
    plot.yaxis.formatter = FuncTickFormatter(code="""
        var labels = %s;
        return labels[tick];
    """ % query)

    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    save(plot, "optimalMatching")

def unrelated_non_enclosed_seeds():
    plot = figure(
                plot_width=resolution, plot_height=resolution/2,
                y_range=["reference", "1", "2", "3", "query1", "query2", "query3", "query4"]
            )

    seeds = [
        ("query1", 0, [450], green, 7),
        ("query1", 7, [500], green, 13),
        ("query1", 24, [525], green, 13),
        ("query1", 47, [547], green, 24),

        ("query2", 5, [270], orange, 3),
        ("query2", 22, [150], blue, 5),
        ("query2", 36, [1200], blue, 20),
        
        ("query3", 6, [20,1340], orange, 2),
        ("query3", 19, [1500], blue, 4),
        ("query3", 35, [320, 1150, 1477], orange, 3),
        ("query3", 46, [1000], orange, 13),

        ("query4", 20, [30, 750], orange, 4),
        ("query4", 33, [800], orange, 4),
    ]

    max_q = 0
    max_r = 0
    for seed in seeds:
        if max_q < seed[1] + seed[-1]:
            max_q = seed[1] + seed[-1]
        if max_r < seed[2][-1] + seed[-1]:
            max_r = seed[2][-1] + seed[-1]

    r_fac = max_q/float(max_r)
    for seed in seeds:
        for end in seed[2]:
            plot.patch(
                [seed[1]+seed[-1], (end+seed[-1])*r_fac, end*r_fac, seed[1]],
                [seed[0], "reference", "reference", seed[0]],
                fill_color=seed[-2],
                fill_alpha=.3,
                line_color=None,
            )
    plot.line([0, max_q], ["reference", "reference"], color="black", line_width=3)
    for seed in seeds:
        plot.line([seed[1], seed[1] + seed[-1]], [seed[0], seed[0]], color=seed[-2], line_width=3)



    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="hanging"
    plot.axis.axis_label_text_font=font
    plot.axis.major_label_text_font=font
    plot.xaxis.major_tick_line_color = None
    plot.yaxis.major_tick_line_color = None
    plot.xaxis.minor_tick_line_color = None
    plot.yaxis.minor_tick_line_color = None
    plot.xaxis.major_label_text_alpha = 0
    plot.toolbar.logo = None
    plot.toolbar_location = None
    plot.grid.grid_line_color = None
    #plot.xgrid.ticker = FixedTicker(ticks=[-5,3,6,21,25,40])
    save(plot, "unrelatedNonEnclosedSeeds")

def required_nmw_band_size():
    data = ([0.429135585783255, 0.0013163668275559457, 0.00153576129881527, 0.0013163668275559457, 0.00021939447125932427, 0.0, 0.0006581834137779728, 0.002193944712593243, 0.0013163668275559457, 0.0026327336551118918, 0.0026327336551118918, 0.0035103115401491896, 0.0024133391838525673, 0.0039491004826678385, 0.005265467310223785, 0.004607283896445812, 0.0063624396665204076, 0.004826678367705136, 0.005704256252742434, 0.006581834137779732, 0.007020623080298381, 0.00548486178148311, 0.005923650724001759, 0.006581834137779732, 0.007678806494076354, 0.007678806494076354, 0.0068012286090390565, 0.008336989907854328, 0.008775778850372977, 0.006581834137779732, 0.008775778850372977, 0.009214567792891626, 0.009653356735410274, 0.013163668275559466, 0.010969723562966221, 0.013163668275559466, 0.012286090390522168, 0.011627906976744195, 0.01382185168933744, 0.011189118034225546, 0.009653356735410274, 0.013163668275559466, 0.011847301448003519, 0.016235190873190006, 0.014918824045634061, 0.01842913558578325, 0.010969723562966221, 0.015796401930671358, 0.011627906976744195, 0.20645019745502155], [0.9785914757525838, 0.00019580967299784609, 0.00019580967299784609, 9.790483649892306e-05, 9.790483649892306e-05, 9.790483649892306e-05, 9.790483649892306e-05, 0.00013053978199856407, 0.00019580967299784609, 0.00016317472749820508, 6.526989099928203e-05, 9.790483649892306e-05, 0.00019580967299784609, 9.790483649892306e-05, 0.0002284446184974871, 0.00019580967299784609, 0.00019580967299784609, 0.0002284446184974871, 3.2634945499641017e-05, 0.00016317472749820508, 0.00026107956399712813, 0.0002284446184974871, 0.00032634945499641015, 0.00013053978199856407, 0.0004568892369949742, 0.00029371450949676914, 0.00026107956399712813, 0.00032634945499641015, 0.00035898440049605116, 0.0005221591279942563, 0.0004242542914953332, 0.0005547940734938973, 0.00039161934599569217, 0.00039161934599569217, 0.00039161934599569217, 0.0005221591279942563, 0.0006200639644931795, 0.0004242542914953332, 0.0006526989099928205, 0.00032634945499641015, 0.0005221591279942563, 0.0005221591279942563, 0.0005547940734938973, 0.0006853338554924616, 0.00039161934599569217, 0.0006853338554924616, 0.0005221591279942563, 0.0004895241824946152, 0.0004242542914953332, 0.005972195026434325])

    num_buckets = len(data[0])
    if len(data[1]) != num_buckets:
        print("WARNING LENGTHS DIFFER")
    w = 1.0 / (num_buckets)
    buckets_x = []
    for index in range(num_buckets):
        buckets_x.append(index/float(num_buckets))
    print(buckets_x)
    print(w)

    plot = figure(
            title="Figure X: required DP band size",
            plot_width=resolution, plot_height=resolution,
            x_axis_label='relative size required', y_axis_label='relative amount'
        )

    #plot.vbar(x=buckets_x, bottom=0, top=data[1], width=w, color=greys[0], legend=value("inaccurate"))
    #plot.vbar(x=buckets_x, bottom=0, top=data[0], width=w, color="black", legend=value("accurate"))
    for i in range(num_buckets):
        l = buckets_x[i]
        r = l + w
        if data[0][i] < data[1][i]:
            plot.quad(left=l, bottom=-0.001, top=data[1][i], right=r, color=greys[0], line_width=0, legend=value("inaccurate"))
        plot.quad(left=l, bottom=-0.001, top=data[0][i], right=r, fill_color="black", line_width=0, legend=value("accurate"))
        if data[0][i] > data[1][i]:
            plot.quad(left=l, bottom=-0.001, top=data[1][i], right=r, color=greys[0], line_width=0, legend=value("inaccurate"))


    plot.title.text_font=font
    plot.legend.label_text_font=font
    plot.legend.label_text_baseline="bottom"
    plot.axis.axis_label_text_font=font
    plot.axis.axis_label_text_baseline="bottom"
    plot.axis.major_label_text_font=font
    plot.xaxis.major_label_standoff = 10
    plot.xgrid.grid_line_color = None
    plot.toolbar.logo = None
    plot.toolbar_location = None
    plot.legend.location = "top_center"
    save(plot, "nmwBandSize")

# actually call the functions that create the pictures

#unrelated_non_enclosed_seeds()
#forced_gap()
ambiguity_per_length()
#theoretical_max_acc()
#seed_shadows()
#alignment()
#stripOfConsideration()
#optimal_matching()
#required_nmw_band_size()
